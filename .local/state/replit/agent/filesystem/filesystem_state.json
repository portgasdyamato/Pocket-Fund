{"file_contents":{"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect, useState } from \"react\";\n\nexport default function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"dark\");\n\n  useEffect(() => {\n    const stored = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    const initial = stored || \"dark\";\n    setTheme(initial);\n    document.documentElement.classList.toggle(\"dark\", initial === \"dark\");\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"w-5 h-5\" />\n      ) : (\n        <Sun className=\"w-5 h-5\" />\n      )}\n    </Button>\n  );\n}\n","size_bytes":1007},"client/src/pages/ChallengesPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport ChallengeCard from \"@/components/ChallengeCard\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport StreakCounter from \"@/components/StreakCounter\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function ChallengesPage() {\n  const [activeTab, setActiveTab] = useState(\"active\");\n\n  // todo: remove mock functionality\n  const activeChallenges = [\n    {\n      id: '1',\n      title: 'No Coffee Shop Week',\n      difficulty: 'Medium' as const,\n      points: 500,\n      progress: 42,\n      timeRemaining: '3 days left',\n      isActive: true\n    },\n    {\n      id: '2',\n      title: 'Save $100 This Week',\n      difficulty: 'Easy' as const,\n      points: 250,\n      progress: 65,\n      timeRemaining: '2 days left',\n      isActive: true\n    },\n  ];\n\n  // todo: remove mock functionality\n  const availableChallenges = [\n    {\n      id: '3',\n      title: 'Track Every Expense',\n      difficulty: 'Hard' as const,\n      points: 1000,\n      progress: 0,\n      timeRemaining: '1 week',\n      isActive: false\n    },\n    {\n      id: '4',\n      title: 'Cook 5 Meals at Home',\n      difficulty: 'Medium' as const,\n      points: 400,\n      progress: 0,\n      timeRemaining: '1 week',\n      isActive: false\n    },\n    {\n      id: '5',\n      title: 'No Impulse Buys',\n      difficulty: 'Hard' as const,\n      points: 750,\n      progress: 0,\n      timeRemaining: '3 days',\n      isActive: false\n    },\n    {\n      id: '6',\n      title: 'Save $50 This Week',\n      difficulty: 'Easy' as const,\n      points: 200,\n      progress: 0,\n      timeRemaining: '1 week',\n      isActive: false\n    },\n  ];\n\n  // todo: remove mock functionality\n  const completedChallenges = [\n    {\n      id: '7',\n      title: 'First Week Logging',\n      difficulty: 'Easy' as const,\n      points: 100,\n      progress: 100,\n      isActive: false\n    },\n    {\n      id: '8',\n      title: 'Budget Setup Pro',\n      difficulty: 'Medium' as const,\n      points: 300,\n      progress: 100,\n      isActive: false\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"sticky top-0 z-50 border-b border-primary/20 bg-background/30 backdrop-blur-2xl supports-[backdrop-filter]:bg-background/30 shadow-[0_8px_32px_rgba(139,92,246,0.1)]\">\n        <div className=\"container mx-auto px-4 py-3 flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-back\">\n                <ArrowLeft className=\"w-5 h-5\" />\n              </Button>\n            </Link>\n            <h1 className=\"text-xl font-bold\">Challenges</h1>\n            <StreakCounter days={12} />\n          </div>\n          <ThemeToggle />\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-6 max-w-4xl\">\n        {/* Stats Card */}\n        <Card className=\"p-6 mb-6 backdrop-blur-xl bg-card/40 border-primary/20 shadow-[0_0_30px_rgba(139,92,246,0.12)] relative overflow-hidden\">\n          <div className=\"absolute inset-0 bg-gradient-to-br from-primary/8 via-secondary/5 to-accent/8 pointer-events-none\" />\n          <div className=\"grid grid-cols-3 gap-4 text-center relative z-10\">\n            <div>\n              <p className=\"text-3xl font-bold text-primary\">2,450</p>\n              <p className=\"text-sm text-muted-foreground\">Total Points</p>\n            </div>\n            <div>\n              <p className=\"text-3xl font-bold text-secondary\">8</p>\n              <p className=\"text-sm text-muted-foreground\">Completed</p>\n            </div>\n            <div>\n              <p className=\"text-3xl font-bold text-accent\">2</p>\n              <p className=\"text-sm text-muted-foreground\">Active Now</p>\n            </div>\n          </div>\n        </Card>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid w-full grid-cols-3 mb-6\">\n            <TabsTrigger value=\"active\" data-testid=\"tab-active\">Active</TabsTrigger>\n            <TabsTrigger value=\"available\" data-testid=\"tab-available\">Available</TabsTrigger>\n            <TabsTrigger value=\"completed\" data-testid=\"tab-completed\">Completed</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"active\" className=\"space-y-4\">\n            {activeChallenges.map((challenge) => (\n              <ChallengeCard\n                key={challenge.id}\n                {...challenge}\n                onAction={() => console.log(`Continue challenge ${challenge.id}`)}\n              />\n            ))}\n          </TabsContent>\n\n          <TabsContent value=\"available\" className=\"grid gap-4 sm:grid-cols-2\">\n            {availableChallenges.map((challenge) => (\n              <ChallengeCard\n                key={challenge.id}\n                {...challenge}\n                onAction={() => console.log(`Start challenge ${challenge.id}`)}\n              />\n            ))}\n          </TabsContent>\n\n          <TabsContent value=\"completed\" className=\"space-y-4\">\n            {completedChallenges.map((challenge) => (\n              <ChallengeCard\n                key={challenge.id}\n                {...challenge}\n                onAction={() => console.log(`View challenge ${challenge.id}`)}\n              />\n            ))}\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n}\n","size_bytes":5583},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/examples/ThemeToggle.tsx":{"content":"import ThemeToggle from '../ThemeToggle';\n\nexport default function ThemeToggleExample() {\n  return <ThemeToggle />;\n}\n","size_bytes":118},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/StreakCounter.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Flame } from \"lucide-react\";\n\ninterface StreakCounterProps {\n  days: number;\n}\n\nexport default function StreakCounter({ days }: StreakCounterProps) {\n  return (\n    <Badge \n      variant=\"secondary\" \n      className=\"gap-1 px-3 py-1.5 bg-primary/20 text-primary border-primary/40 backdrop-blur-sm shadow-[0_0_15px_rgba(139,92,246,0.3)]\"\n      data-testid=\"badge-streak\"\n    >\n      <Flame className=\"w-4 h-4 fill-current drop-shadow-[0_0_8px_rgba(139,92,246,0.8)]\" />\n      <span className=\"font-bold text-sm\" data-testid=\"text-streak-days\">{days} day streak</span>\n    </Badge>\n  );\n}\n","size_bytes":642},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/HealthScoreCard.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\n\ninterface HealthScoreCardProps {\n  score: number;\n  message: string;\n}\n\nexport default function HealthScoreCard({ score, message }: HealthScoreCardProps) {\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return \"text-secondary\";\n    if (score >= 60) return \"text-accent\";\n    return \"text-destructive\";\n  };\n\n  const getProgressColor = (score: number) => {\n    if (score >= 80) return \"bg-secondary\";\n    if (score >= 60) return \"bg-accent\";\n    return \"bg-destructive\";\n  };\n\n  return (\n    <Card className=\"p-6 relative overflow-hidden backdrop-blur-xl bg-card/40 border-primary/30 shadow-[0_0_30px_rgba(139,92,246,0.15)]\">\n      <div className=\"absolute inset-0 bg-gradient-to-br from-primary/10 via-secondary/5 to-transparent pointer-events-none\" />\n      <div className=\"flex flex-col items-center gap-4 relative z-10\">\n        <div className=\"relative w-40 h-40 flex items-center justify-center\">\n          <svg className=\"w-full h-full transform -rotate-90\" viewBox=\"0 0 160 160\">\n            <circle\n              cx=\"80\"\n              cy=\"80\"\n              r=\"70\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"12\"\n              className=\"text-muted opacity-20\"\n            />\n            <circle\n              cx=\"80\"\n              cy=\"80\"\n              r=\"70\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"12\"\n              strokeDasharray={`${(score / 100) * 439.6} 439.6`}\n              className={getScoreColor(score)}\n              strokeLinecap=\"round\"\n            />\n          </svg>\n          <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n            <span className={`text-5xl font-bold ${getScoreColor(score)}`}>\n              {score}\n            </span>\n            <span className=\"text-xs text-muted-foreground font-medium uppercase tracking-wider\">\n              Health Score\n            </span>\n          </div>\n        </div>\n        <div className=\"text-center\">\n          <h3 className=\"text-xl font-bold mb-1\">Your Financial Health</h3>\n          <p className=\"text-sm text-muted-foreground\">{message}</p>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":2316},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport BudgetPage from \"@/pages/BudgetPage\";\nimport ChallengesPage from \"@/pages/ChallengesPage\";\nimport AskCoach from \"@/pages/AskCoach\";\nimport ExpenseLog from \"@/pages/ExpenseLog\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/budget\" component={BudgetPage} />\n      <Route path=\"/challenges\" component={ChallengesPage} />\n      <Route path=\"/coach\" component={AskCoach} />\n      <Route path=\"/expenses\" component={ExpenseLog} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1121},"client/src/components/QuickActionButton.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface QuickActionButtonProps {\n  icon: LucideIcon;\n  label: string;\n  onClick?: () => void;\n}\n\nexport default function QuickActionButton({ icon: Icon, label, onClick }: QuickActionButtonProps) {\n  return (\n    <Button\n      variant=\"outline\"\n      className=\"h-auto flex-col gap-2 p-4 hover-elevate active-elevate-2\"\n      onClick={onClick}\n      data-testid={`button-${label.toLowerCase().replace(/\\s+/g, '-')}`}\n    >\n      <Icon className=\"w-6 h-6\" />\n      <span className=\"text-xs font-semibold\">{label}</span>\n    </Button>\n  );\n}\n","size_bytes":634},"client/src/components/AchievementBadge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Trophy, Zap, Target, Award } from \"lucide-react\";\n\ninterface AchievementBadgeProps {\n  id: string;\n  type: 'trophy' | 'zap' | 'target' | 'award';\n  title: string;\n  description: string;\n  points: number;\n}\n\nexport default function AchievementBadge({ id, type, title, description, points }: AchievementBadgeProps) {\n  const getIcon = () => {\n    const iconClass = \"w-5 h-5\";\n    switch (type) {\n      case 'trophy': return <Trophy className={iconClass} />;\n      case 'zap': return <Zap className={iconClass} />;\n      case 'target': return <Target className={iconClass} />;\n      case 'award': return <Award className={iconClass} />;\n    }\n  };\n\n  return (\n    <div className=\"flex items-center gap-3 p-3 rounded-lg bg-primary/5 border border-primary/10\" data-testid={`badge-achievement-${id}`}>\n      <div className=\"p-2 rounded-full bg-primary/10 text-primary\">\n        {getIcon()}\n      </div>\n      <div className=\"flex-1 min-w-0\">\n        <h4 className=\"font-bold text-sm\" data-testid={`text-achievement-title-${id}`}>{title}</h4>\n        <p className=\"text-xs text-muted-foreground\" data-testid={`text-achievement-desc-${id}`}>{description}</p>\n      </div>\n      <Badge variant=\"secondary\" className=\"font-bold\" data-testid={`text-achievement-points-${id}`}>\n        +{points}\n      </Badge>\n    </div>\n  );\n}\n","size_bytes":1373},"client/src/components/examples/ExpenseItem.tsx":{"content":"import ExpenseItem from '../ExpenseItem';\n\nexport default function ExpenseItemExample() {\n  return (\n    <ExpenseItem\n      id=\"1\"\n      category=\"Food\"\n      description=\"Starbucks Latte\"\n      amount={6.50}\n      date=\"Today\"\n    />\n  );\n}\n","size_bytes":242},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { chatWithFinancialAssistant, categorizePurchase, generateFinancialInsight } from \"./geminiService\";\nimport { insertGoalSchema, insertTransactionSchema, insertStashTransactionSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  await setupAuth(app);\n\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  app.patch('/api/user/onboarding', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { status } = req.body;\n      await storage.updateUserOnboarding(userId, status);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating onboarding:\", error);\n      res.status(500).json({ message: \"Failed to update onboarding status\" });\n    }\n  });\n\n  app.post('/api/goals', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const goalData = insertGoalSchema.parse({ ...req.body, userId });\n      const goal = await storage.createGoal(goalData);\n      res.json(goal);\n    } catch (error: any) {\n      console.error(\"Error creating goal:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create goal\" });\n    }\n  });\n\n  app.get('/api/goals', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const goals = await storage.getGoals(userId);\n      res.json(goals);\n    } catch (error) {\n      console.error(\"Error fetching goals:\", error);\n      res.status(500).json({ message: \"Failed to fetch goals\" });\n    }\n  });\n\n  app.get('/api/goals/main', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const goal = await storage.getMainGoal(userId);\n      res.json(goal || null);\n    } catch (error) {\n      console.error(\"Error fetching main goal:\", error);\n      res.status(500).json({ message: \"Failed to fetch main goal\" });\n    }\n  });\n\n  app.post('/api/transactions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const transactionData = insertTransactionSchema.parse({ ...req.body, userId });\n      const transaction = await storage.createTransaction(transactionData);\n      res.json(transaction);\n    } catch (error: any) {\n      console.error(\"Error creating transaction:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create transaction\" });\n    }\n  });\n\n  app.get('/api/transactions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      const transactions = await storage.getTransactions(userId, limit);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.get('/api/transactions/untagged', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const transactions = await storage.getUntaggedTransactions(userId);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching untagged transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch untagged transactions\" });\n    }\n  });\n\n  app.patch('/api/transactions/:id/tag', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { tag } = req.body;\n      await storage.updateTransactionTag(id, tag);\n      \n      if (tag) {\n        await storage.updateStreak(req.user.claims.sub, 'fight');\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating transaction tag:\", error);\n      res.status(500).json({ message: \"Failed to update transaction tag\" });\n    }\n  });\n\n  app.delete('/api/transactions/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { id } = req.params;\n      await storage.deleteTransaction(id, userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting transaction:\", error);\n      res.status(500).json({ message: \"Failed to delete transaction\" });\n    }\n  });\n\n  app.post('/api/transactions/:id/categorize', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { id } = req.params;\n      const transactions = await storage.getTransactions(userId, 100);\n      const transaction = transactions.find(t => t.id === id);\n      \n      if (!transaction) {\n        return res.status(404).json({ message: \"Transaction not found\" });\n      }\n      \n      const suggestion = await categorizePurchase(\n        transaction.description,\n        parseFloat(transaction.amount)\n      );\n      \n      res.json(suggestion);\n    } catch (error) {\n      console.error(\"Error categorizing transaction:\", error);\n      res.status(500).json({ message: \"Failed to categorize transaction\" });\n    }\n  });\n\n  app.get('/api/badges', isAuthenticated, async (_req, res) => {\n    try {\n      const badges = await storage.getBadges();\n      res.json(badges);\n    } catch (error) {\n      console.error(\"Error fetching badges:\", error);\n      res.status(500).json({ message: \"Failed to fetch badges\" });\n    }\n  });\n\n  app.get('/api/user/badges', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const userBadges = await storage.getUserBadges(userId);\n      res.json(userBadges);\n    } catch (error) {\n      console.error(\"Error fetching user badges:\", error);\n      res.status(500).json({ message: \"Failed to fetch user badges\" });\n    }\n  });\n\n  app.get('/api/quests', isAuthenticated, async (_req, res) => {\n    try {\n      const quests = await storage.getQuests();\n      res.json(quests);\n    } catch (error) {\n      console.error(\"Error fetching quests:\", error);\n      res.status(500).json({ message: \"Failed to fetch quests\" });\n    }\n  });\n\n  app.get('/api/user/quests', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const userQuests = await storage.getUserQuests(userId);\n      res.json(userQuests);\n    } catch (error) {\n      console.error(\"Error fetching user quests:\", error);\n      res.status(500).json({ message: \"Failed to fetch user quests\" });\n    }\n  });\n\n  app.post('/api/quests/:id/complete', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { id } = req.params;\n      await storage.completeQuest(userId, id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error completing quest:\", error);\n      res.status(500).json({ message: \"Failed to complete quest\" });\n    }\n  });\n\n  app.get('/api/streak', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const streak = await storage.getStreak(userId);\n      res.json(streak || { saveStreak: 0, fightStreak: 0 });\n    } catch (error) {\n      console.error(\"Error fetching streak:\", error);\n      res.status(500).json({ message: \"Failed to fetch streak\" });\n    }\n  });\n\n  app.post('/api/stash', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const stashData = insertStashTransactionSchema.parse({ ...req.body, userId });\n      const stash = await storage.createStashTransaction(stashData);\n      \n      if (stashData.type === 'stash') {\n        await storage.updateStreak(userId, 'save');\n      }\n      \n      if (stashData.goalId) {\n        const goal = (await storage.getGoals(userId)).find(g => g.id === stashData.goalId);\n        if (goal) {\n          const currentAmount = parseFloat(goal.currentAmount);\n          const newAmount = stashData.type === 'stash' \n            ? currentAmount + parseFloat(stashData.amount)\n            : currentAmount - parseFloat(stashData.amount);\n          await storage.updateGoalProgress(stashData.goalId, newAmount.toFixed(2));\n        }\n      }\n      \n      res.json(stash);\n    } catch (error: any) {\n      console.error(\"Error creating stash transaction:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create stash transaction\" });\n    }\n  });\n\n  app.get('/api/stash', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const stashTransactions = await storage.getStashTransactions(userId);\n      res.json(stashTransactions);\n    } catch (error) {\n      console.error(\"Error fetching stash transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch stash transactions\" });\n    }\n  });\n\n  app.get('/api/stash/total', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const total = await storage.getTotalStashed(userId);\n      res.json({ total });\n    } catch (error) {\n      console.error(\"Error fetching total stashed:\", error);\n      res.status(500).json({ message: \"Failed to fetch total stashed\" });\n    }\n  });\n\n  app.post('/api/ai/chat', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { message } = req.body;\n      \n      const user = await storage.getUser(userId);\n      const streak = await storage.getStreak(userId);\n      const totalStashed = await storage.getTotalStashed(userId);\n      const transactions = await storage.getTransactions(userId, 30);\n      \n      const ickAmount = transactions\n        .filter(t => t.tag === 'Ick')\n        .reduce((sum, t) => sum + parseFloat(t.amount), 0);\n      \n      const response = await chatWithFinancialAssistant(message, {\n        userName: user?.firstName || undefined,\n        totalStashed,\n        saveStreak: streak?.saveStreak || 0,\n        ickAmount,\n      });\n      \n      res.json({ response });\n    } catch (error) {\n      console.error(\"Error in AI chat:\", error);\n      res.status(500).json({ message: \"Failed to get AI response\" });\n    }\n  });\n\n  app.post('/api/ai/insight', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const transactions = await storage.getTransactions(userId, 100);\n      \n      const totalSpent = transactions.reduce((sum, t) => sum + parseFloat(t.amount), 0);\n      const ickSpent = transactions.filter(t => t.tag === 'Ick').reduce((sum, t) => sum + parseFloat(t.amount), 0);\n      const wantSpent = transactions.filter(t => t.tag === 'Want').reduce((sum, t) => sum + parseFloat(t.amount), 0);\n      const needSpent = transactions.filter(t => t.tag === 'Need').reduce((sum, t) => sum + parseFloat(t.amount), 0);\n      \n      const insight = await generateFinancialInsight(totalSpent, ickSpent, wantSpent, needSpent);\n      \n      res.json({ insight });\n    } catch (error) {\n      console.error(\"Error generating insight:\", error);\n      res.status(500).json({ message: \"Failed to generate insight\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":11610},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ChallengeCard.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\n\ninterface ChallengeCardProps {\n  id: string;\n  title: string;\n  difficulty: 'Easy' | 'Medium' | 'Hard';\n  points: number;\n  progress: number;\n  timeRemaining?: string;\n  isActive?: boolean;\n  onAction?: () => void;\n}\n\nexport default function ChallengeCard({\n  id,\n  title,\n  difficulty,\n  points,\n  progress,\n  timeRemaining,\n  isActive = false,\n  onAction\n}: ChallengeCardProps) {\n  const getDifficultyColor = (diff: string) => {\n    switch (diff) {\n      case 'Easy': return 'bg-secondary text-secondary-foreground';\n      case 'Medium': return 'bg-accent text-accent-foreground';\n      case 'Hard': return 'bg-destructive text-destructive-foreground';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  return (\n    <Card className=\"p-4 backdrop-blur-xl bg-card/40 border-primary/20 hover:border-primary/40 transition-all hover:shadow-[0_0_25px_rgba(139,92,246,0.2)]\" data-testid={`card-challenge-${id}`}>\n      <div className=\"flex flex-col gap-3\">\n        <div className=\"flex items-start justify-between gap-2\">\n          <h3 className=\"font-bold text-base flex-1\">{title}</h3>\n          <Badge className={getDifficultyColor(difficulty)} data-testid={`badge-difficulty-${id}`}>\n            {difficulty}\n          </Badge>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <div className=\"flex-1\">\n            <Progress value={progress} className=\"h-2\" />\n          </div>\n          <span className=\"text-sm font-bold text-primary\" data-testid={`text-progress-${id}`}>\n            {progress}%\n          </span>\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-1\">\n            <span className=\"text-2xl font-bold text-primary\" data-testid={`text-points-${id}`}>\n              {points}\n            </span>\n            <span className=\"text-xs text-muted-foreground font-semibold uppercase\">pts</span>\n          </div>\n          \n          {timeRemaining && (\n            <span className=\"text-xs text-muted-foreground\" data-testid={`text-time-${id}`}>\n              {timeRemaining}\n            </span>\n          )}\n        </div>\n\n        <Button\n          variant={isActive ? \"default\" : \"outline\"}\n          size=\"sm\"\n          onClick={onAction}\n          className=\"w-full\"\n          data-testid={`button-challenge-action-${id}`}\n        >\n          {isActive ? 'Continue' : 'Start Challenge'}\n        </Button>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":2674},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/examples/QuickActionButton.tsx":{"content":"import QuickActionButton from '../QuickActionButton';\nimport { PlusCircle } from 'lucide-react';\n\nexport default function QuickActionButtonExample() {\n  return <QuickActionButton icon={PlusCircle} label=\"Log Expense\" onClick={() => console.log('Log expense clicked')} />;\n}\n","size_bytes":274},"server/storage.ts":{"content":"import {\n  users,\n  goals,\n  transactions,\n  badges,\n  userBadges,\n  quests,\n  userQuests,\n  streaks,\n  stashTransactions,\n  type User,\n  type UpsertUser,\n  type Goal,\n  type InsertGoal,\n  type Transaction,\n  type InsertTransaction,\n  type Badge,\n  type UserBadge,\n  type Quest,\n  type UserQuest,\n  type Streak,\n  type StashTransaction,\n  type InsertStashTransaction,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, isNull } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (Replit Auth compatible)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserOnboarding(id: string, status: string): Promise<void>;\n  \n  // Goal operations\n  createGoal(goal: InsertGoal): Promise<Goal>;\n  getGoals(userId: string): Promise<Goal[]>;\n  getMainGoal(userId: string): Promise<Goal | undefined>;\n  updateGoalProgress(id: string, amount: string): Promise<void>;\n  \n  // Transaction operations\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  getTransactions(userId: string, limit?: number): Promise<Transaction[]>;\n  getUntaggedTransactions(userId: string): Promise<Transaction[]>;\n  updateTransactionTag(id: string, tag: string): Promise<void>;\n  deleteTransaction(id: string, userId: string): Promise<void>;\n  \n  // Badge operations\n  getBadges(): Promise<Badge[]>;\n  getUserBadges(userId: string): Promise<UserBadge[]>;\n  awardBadge(userId: string, badgeId: string): Promise<void>;\n  \n  // Quest operations\n  getQuests(): Promise<Quest[]>;\n  getUserQuests(userId: string): Promise<UserQuest[]>;\n  completeQuest(userId: string, questId: string): Promise<void>;\n  \n  // Streak operations\n  getStreak(userId: string): Promise<Streak | undefined>;\n  updateStreak(userId: string, type: 'save' | 'fight'): Promise<void>;\n  \n  // Stash operations\n  createStashTransaction(stash: InsertStashTransaction): Promise<StashTransaction>;\n  getStashTransactions(userId: string): Promise<StashTransaction[]>;\n  getTotalStashed(userId: string): Promise<number>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserOnboarding(id: string, status: string): Promise<void> {\n    await db.update(users).set({ onboardingStatus: status }).where(eq(users.id, id));\n  }\n\n  // Goal operations\n  async createGoal(goal: InsertGoal): Promise<Goal> {\n    const [newGoal] = await db.insert(goals).values(goal).returning();\n    return newGoal;\n  }\n\n  async getGoals(userId: string): Promise<Goal[]> {\n    return await db.select().from(goals).where(eq(goals.userId, userId));\n  }\n\n  async getMainGoal(userId: string): Promise<Goal | undefined> {\n    const [goal] = await db\n      .select()\n      .from(goals)\n      .where(and(eq(goals.userId, userId), eq(goals.isMain, true)));\n    return goal;\n  }\n\n  async updateGoalProgress(id: string, amount: string): Promise<void> {\n    await db.update(goals).set({ currentAmount: amount }).where(eq(goals.id, id));\n  }\n\n  // Transaction operations\n  async createTransaction(transaction: InsertTransaction): Promise<Transaction> {\n    const [newTransaction] = await db.insert(transactions).values(transaction).returning();\n    return newTransaction;\n  }\n\n  async getTransactions(userId: string, limit = 10): Promise<Transaction[]> {\n    return await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.userId, userId))\n      .orderBy(desc(transactions.date))\n      .limit(limit);\n  }\n\n  async getUntaggedTransactions(userId: string): Promise<Transaction[]> {\n    return await db\n      .select()\n      .from(transactions)\n      .where(and(eq(transactions.userId, userId), isNull(transactions.tag)))\n      .orderBy(desc(transactions.date));\n  }\n\n  async updateTransactionTag(id: string, tag: string): Promise<void> {\n    await db.update(transactions).set({ tag }).where(eq(transactions.id, id));\n  }\n\n  async deleteTransaction(id: string, userId: string): Promise<void> {\n    await db.delete(transactions).where(and(eq(transactions.id, id), eq(transactions.userId, userId)));\n  }\n\n  // Badge operations\n  async getBadges(): Promise<Badge[]> {\n    return await db.select().from(badges);\n  }\n\n  async getUserBadges(userId: string): Promise<UserBadge[]> {\n    return await db.select().from(userBadges).where(eq(userBadges.userId, userId));\n  }\n\n  async awardBadge(userId: string, badgeId: string): Promise<void> {\n    await db.insert(userBadges).values({ userId, badgeId });\n  }\n\n  // Quest operations\n  async getQuests(): Promise<Quest[]> {\n    return await db.select().from(quests);\n  }\n\n  async getUserQuests(userId: string): Promise<UserQuest[]> {\n    return await db.select().from(userQuests).where(eq(userQuests.userId, userId));\n  }\n\n  async completeQuest(userId: string, questId: string): Promise<void> {\n    const [existing] = await db\n      .select()\n      .from(userQuests)\n      .where(and(eq(userQuests.userId, userId), eq(userQuests.questId, questId)));\n\n    if (existing) {\n      await db\n        .update(userQuests)\n        .set({ completed: true, completedAt: new Date() })\n        .where(eq(userQuests.id, existing.id));\n    } else {\n      await db.insert(userQuests).values({\n        userId,\n        questId,\n        completed: true,\n        completedAt: new Date(),\n      });\n    }\n  }\n\n  // Streak operations\n  async getStreak(userId: string): Promise<Streak | undefined> {\n    const [streak] = await db.select().from(streaks).where(eq(streaks.userId, userId));\n    return streak;\n  }\n\n  async updateStreak(userId: string, type: 'save' | 'fight'): Promise<void> {\n    const existingStreak = await this.getStreak(userId);\n    \n    if (!existingStreak) {\n      await db.insert(streaks).values({\n        userId,\n        saveStreak: type === 'save' ? 1 : 0,\n        fightStreak: type === 'fight' ? 1 : 0,\n        lastSaveDate: type === 'save' ? new Date() : null,\n        lastFightDate: type === 'fight' ? new Date() : null,\n      });\n    } else {\n      const updates: any = {};\n      if (type === 'save') {\n        updates.saveStreak = existingStreak.saveStreak + 1;\n        updates.lastSaveDate = new Date();\n      } else {\n        updates.fightStreak = existingStreak.fightStreak + 1;\n        updates.lastFightDate = new Date();\n      }\n      await db.update(streaks).set(updates).where(eq(streaks.userId, userId));\n    }\n  }\n\n  // Stash operations\n  async createStashTransaction(stash: InsertStashTransaction): Promise<StashTransaction> {\n    const [newStash] = await db.insert(stashTransactions).values(stash).returning();\n    return newStash;\n  }\n\n  async getStashTransactions(userId: string): Promise<StashTransaction[]> {\n    return await db\n      .select()\n      .from(stashTransactions)\n      .where(eq(stashTransactions.userId, userId))\n      .orderBy(desc(stashTransactions.createdAt));\n  }\n\n  async getTotalStashed(userId: string): Promise<number> {\n    const transactions = await this.getStashTransactions(userId);\n    return transactions.reduce((total, t) => {\n      const amount = parseFloat(t.amount);\n      return t.type === 'stash' ? total + amount : total - amount;\n    }, 0);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":7620},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"design_guidelines.md":{"content":"# Design Guidelines: The Financial Glow-Up\n\n## Design Approach\n\n**Reference-Based Approach** drawing from Gen-Z success stories:\n- **Duolingo**: Gamification, streak mechanics, celebration moments\n- **Nike Training Club**: Motivational language, progress visualization, achievement focus\n- **Cash App**: Clean mobile-first, Gen-Z friendly, approachable finance\n- **Strava**: Social challenges, leaderboards, performance tracking\n\n**Core Design Principles:**\n1. **High Energy, Zero Judgment**: Bold, confident, motivational - never boring or corporate\n2. **Instant Gratification**: Immediate visual feedback for every action\n3. **Game First, Finance Second**: Make budgeting feel like leveling up, not restricting\n4. **Mobile-Native**: Design for thumbs, not desktops\n\n## Typography System\n\n**Headings:**\n- Display/Hero: 700 weight, 3xl to 6xl scale, tight leading for punch\n- H1: 700 weight, 2xl to 4xl\n- H2: 600 weight, xl to 2xl\n- H3: 600 weight, lg to xl\n\n**Body & UI:**\n- Primary body: 400 weight, base to lg\n- Labels/Tags: 600 weight, sm to base, uppercase tracking for energy\n- Numbers/Stats: 700 weight, tabular figures, emphasize impact\n- Microcopy/Hints: 400 weight, sm, slightly loose leading\n\n**Font Selection:** Google Fonts via CDN\n- Headlines: Space Grotesk or Inter (700-800 weights)\n- Body: Inter or DM Sans (400-600 weights)\n- Accent/Stats: JetBrains Mono for numbers (tabular)\n\n## Layout System\n\n**Spacing Primitives:** Use Tailwind units of 1, 2, 4, 6, 8, 12, 16 for consistency\n- Micro: p-1, gap-2 (tight elements)\n- Standard: p-4, m-6, gap-4 (cards, components)\n- Section: py-8, py-12, py-16 (vertical rhythm)\n- Major: mt-12, mb-16 (page sections)\n\n**Grid System:**\n- Mobile: Single column, full-bleed cards\n- Tablet: 2-column for stats, challenges\n- Desktop: 3-column dashboard, 2-column detail views\n- Max-width: max-w-7xl for dashboards, max-w-4xl for focused tasks\n\n**Container Strategy:**\n- Dashboard: Full viewport with fixed navigation, scrollable content areas\n- Cards: Rounded-2xl corners, shadow-lg elevation\n- Overlays: Rounded-3xl modals, slide-up sheets for mobile\n\n## Component Library\n\n### Navigation & Structure\n\n**Mobile Bottom Tab Bar:**\n- 5 primary actions: Dashboard, Fight Plan (Budget), Add Expense, Challenges, Profile\n- Large touch targets (min 48px height)\n- Icon + label combo\n- Active state with heavier weight icon\n- Icons: Heroicons via CDN\n\n**Top Header:**\n- Left: Back/Menu\n- Center: Page title or streak counter\n- Right: Notifications bell, settings\n- Sticky positioning with subtle shadow on scroll\n\n**Dashboard Layout:**\n- Hero Stats Card: Financial health score with circular progress\n- Quick Actions: 4-button grid (Log Expense, Start Challenge, View Fight Plan, Ask Coach)\n- Current Fight: Active budget overview with progress bars\n- Recent Wins: Achievement feed with celebratory badges\n- This Week's Rounds: Challenge cards in horizontal scroll\n\n### Core Components\n\n**Cards:**\n- Primary: Rounded-2xl, p-6, shadow-md, hover:shadow-lg transition\n- Stat Cards: Icon + Big Number + Label + Trend indicator\n- Challenge Cards: Title + Progress Ring + Points + CTA\n- Transaction Cards: Icon + Description + Amount + Category tag\n\n**Progress Indicators:**\n- Circular Progress: Health score, challenge completion (0-100%)\n- Linear Bars: Budget categories, spending limits\n- Streak Flames: Daily login/logging streaks with fire emoji\n- Level Badges: Milestone achievements with metallic treatments\n\n**Buttons:**\n- Primary CTA: Rounded-full, px-8, py-4, text-lg, font-600, shadow-md\n- Secondary: Rounded-full, border-2, px-6, py-3\n- Ghost: No background, underline on hover\n- Floating Action (FAB): Fixed bottom-right, rounded-full, size-16, shadow-xl\n- On images: Backdrop-blur-md background, rounded-full\n\n**Input Fields:**\n- Rounded-xl borders, p-4 padding\n- Large touch targets for mobile\n- Inline icons (left side)\n- Error states with shake animation\n- Success states with check mark\n\n**Tags & Badges:**\n- Rounded-full, px-3, py-1, text-sm, font-600, uppercase tracking-wide\n- Category tags: Small, pill-shaped\n- Points badges: Larger, with icon prefix\n- Streak indicators: Flame emoji + number\n\n### Data Visualization\n\n**Health Score (Dashboard Hero):**\n- Large circular progress (200px+ diameter on mobile)\n- Animated fill on page load\n- Central score number (0-100)\n- Surrounding text: \"Your Financial Health\"\n\n**Spending Charts:**\n- Donut chart for category breakdown\n- Simple bar charts for week-over-week\n- Trend lines with gradient fills\n- Interactive tooltips on hover/tap\n\n**Challenge Progress:**\n- Ring progress for active challenges\n- Mini progress bars in challenge cards\n- Completion checkmarks and celebration confetti\n\n### Gamification Elements\n\n**Victory Moments:**\n- Full-screen celebration overlay when goals hit\n- Confetti animation (use canvas-confetti library)\n- Bold achievement text with points earned\n- Share to social CTA\n\n**Streak Tracking:**\n- Fire emoji + number in top corner\n- Growing flame intensity with longer streaks\n- Warning state at risk of breaking\n\n**Point System:**\n- Always visible running total in header\n- \"+50 Points!\" toast notifications\n- Leaderboard rankings (if social features enabled)\n\n**Level System:**\n- Progress bar showing next level\n- Badge collection gallery\n- \"You just leveled up!\" animations\n\n### AI Coach Interface\n\n**Chat Interface:**\n- Bottom-anchored input with send button\n- Message bubbles: Coach (left-aligned), User (right-aligned)\n- Typing indicators with dots animation\n- Quick reply chips below coach messages\n- Emoji reactions for coach encouragement\n\n**Coach Personality:**\n- Avatar: Simple illustration or emoji representation\n- Response style: Short, punchy, supportive messages\n- Use motivational slang: \"Let's get it!\", \"That's a W!\", \"You're crushing it!\"\n- Celebrate wins, gentle on setbacks\n\n### Expense Logging\n\n**Quick Add Interface:**\n- Large amount input (front and center, big type)\n- Category selection grid (icons + labels)\n- Optional note field\n- Voice input option\n- Camera receipt scan button\n- Swipe to confirm animation\n\n**Category Icons:**\n- Food: Fork/knife (Heroicons: cake)\n- Transport: Car (Heroicons: truck)\n- Shopping: Bag (Heroicons: shopping-bag)\n- Entertainment: Ticket (Heroicons: ticket)\n- Bills: Document (Heroicons: document-text)\n- Other: Tag (Heroicons: tag)\n\n### Challenge System\n\n**Challenge Cards:**\n- Title with emoji prefix\n- Difficulty badge (Easy/Medium/Hard)\n- Points reward (large, prominent)\n- Progress ring or bar\n- Time remaining countdown\n- Join/Continue CTA\n\n**Challenge Types:**\n- Daily: 24hr countdown\n- Weekly: Progress across 7 days\n- Monthly: Longer-term goals\n- Special Events: Limited time, bonus points\n\n## Animations & Interactions\n\n**Use Sparingly - High Impact Only:**\n- Page transitions: Slide animations between views\n- Success states: Confetti on goal completion\n- Progress: Smooth fill animations for bars/rings\n- Micro: Subtle scale on button press (scale-95 active state)\n- Loading: Skeleton screens, not spinners\n\n**Avoid:**\n- Parallax scrolling\n- Excessive hover effects\n- Auto-playing carousels\n- Distracting background animations\n\n## Images\n\n**Hero Image (Landing/Marketing Page):**\n- Full-width, 70vh height hero image\n- Image description: Diverse Gen-Z individuals celebrating financial wins - fist bumps, smartphone showing savings app, vibrant energy, modern setting (coffee shop or co-working space)\n- Overlaid headline with backdrop-blur buttons\n\n**Dashboard:**\n- Achievement badges: Custom illustrated icons for milestones\n- Empty states: Friendly illustrations for \"No expenses yet,\" \"Start your first challenge\"\n- Coach avatar: Simple, friendly character illustration\n\n**Challenge Thumbnails:**\n- Small icons representing challenge types (piggy bank, coffee cup, shopping bag)\n- Keep lightweight, icon-based rather than photos\n\n**Celebration Screens:**\n- Illustrated trophies, medals, confetti patterns\n- Bold graphics, not photographic\n\n## Responsive Behavior\n\n**Mobile (base to md):**\n- Single column layouts\n- Bottom navigation\n- Full-width cards with m-4\n- Sticky headers\n- Slide-up modals\n\n**Tablet (md to lg):**\n- 2-column grid for stats\n- Side-by-side budget categories\n- Expanded challenge cards\n\n**Desktop (lg+):**\n- 3-column dashboard\n- Persistent sidebar navigation (left)\n- Detail panels (right)\n- Hover states more prominent\n\n## Accessibility\n\n- ARIA labels on all interactive elements\n- Keyboard navigation support\n- Focus visible states with 2px ring\n- Touch targets minimum 44x44px\n- High contrast text throughout\n- Screen reader friendly progress announcements","size_bytes":8583},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/examples/AchievementBadge.tsx":{"content":"import AchievementBadge from '../AchievementBadge';\n\nexport default function AchievementBadgeExample() {\n  return (\n    <AchievementBadge\n      id=\"1\"\n      type=\"trophy\"\n      title=\"First Week Complete!\"\n      description=\"You logged expenses for 7 days straight\"\n      points={100}\n    />\n  );\n}\n","size_bytes":299},"client/src/pages/Dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { PlusCircle, Target, MessageCircle, TrendingUp } from \"lucide-react\";\nimport HealthScoreCard from \"@/components/HealthScoreCard\";\nimport QuickActionButton from \"@/components/QuickActionButton\";\nimport ChallengeCard from \"@/components/ChallengeCard\";\nimport ExpenseItem from \"@/components/ExpenseItem\";\nimport AchievementBadge from \"@/components/AchievementBadge\";\nimport StreakCounter from \"@/components/StreakCounter\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport AddExpenseModal from \"@/components/AddExpenseModal\";\nimport type { Transaction } from \"@shared/schema\";\nimport { format } from \"date-fns\";\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation();\n  const [isAddExpenseOpen, setIsAddExpenseOpen] = useState(false);\n\n  const { data: transactions = [], isLoading: isLoadingTransactions, isError: isTransactionsError } = useQuery<Transaction[]>({\n    queryKey: [\"/api/transactions\"],\n    retry: false,\n  });\n\n  // todo: remove mock functionality\n  const mockChallenges = [\n    {\n      id: '1',\n      title: 'No Coffee Shop Week',\n      difficulty: 'Medium' as const,\n      points: 500,\n      progress: 42,\n      timeRemaining: '3 days left',\n      isActive: true\n    },\n    {\n      id: '2',\n      title: 'Save $100 This Week',\n      difficulty: 'Easy' as const,\n      points: 250,\n      progress: 65,\n      timeRemaining: '2 days left',\n      isActive: true\n    },\n    {\n      id: '3',\n      title: 'Track Every Expense',\n      difficulty: 'Hard' as const,\n      points: 1000,\n      progress: 28,\n      timeRemaining: '1 week left',\n      isActive: false\n    }\n  ];\n\n  const formatDate = (date: Date | string) => {\n    const d = new Date(date);\n    const today = new Date();\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    if (d.toDateString() === today.toDateString()) {\n      return 'Today';\n    } else if (d.toDateString() === yesterday.toDateString()) {\n      return 'Yesterday';\n    } else {\n      return format(d, 'MMM d');\n    }\n  };\n\n  const recentExpenses = transactions.slice(0, 4).map(t => ({\n    id: t.id,\n    category: t.category || 'Other',\n    description: t.description,\n    amount: parseFloat(t.amount),\n    date: formatDate(t.date),\n  }));\n\n  // todo: remove mock functionality\n  const mockAchievements = [\n    {\n      id: '1',\n      type: 'trophy' as const,\n      title: 'First Week Complete!',\n      description: 'Logged expenses for 7 days straight',\n      points: 100\n    },\n    {\n      id: '2',\n      type: 'zap' as const,\n      title: 'Quick Saver',\n      description: 'Saved $50 in one day',\n      points: 50\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"sticky top-0 z-50 border-b border-primary/20 bg-background/30 backdrop-blur-2xl supports-[backdrop-filter]:bg-background/30 shadow-[0_8px_32px_rgba(139,92,246,0.1)]\">\n        <div className=\"container mx-auto px-4 py-3 flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <h1 className=\"text-xl font-bold\">The Glow-Up</h1>\n            <StreakCounter days={12} />\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-notifications\">\n              <div className=\"relative\">\n                <MessageCircle className=\"w-5 h-5\" />\n                <span className=\"absolute -top-1 -right-1 w-2 h-2 bg-primary rounded-full\" />\n              </div>\n            </Button>\n            <ThemeToggle />\n          </div>\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-6 space-y-6 max-w-6xl\">\n        {/* Hero Section */}\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <HealthScoreCard \n            score={78} \n            message=\"You're crushing it! Keep up the momentum.\" \n          />\n          \n          <Card className=\"p-6 relative overflow-hidden backdrop-blur-xl bg-card/40 border-secondary/30 shadow-[0_0_30px_rgba(59,130,246,0.15)]\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-secondary/10 via-transparent to-accent/10 pointer-events-none\" />\n            <h3 className=\"font-bold text-lg mb-4 relative z-10\">Quick Actions</h3>\n            <div className=\"grid grid-cols-2 gap-3 relative z-10\">\n              <QuickActionButton\n                icon={PlusCircle}\n                label=\"Log Expense\"\n                onClick={() => setIsAddExpenseOpen(true)}\n              />\n              <QuickActionButton\n                icon={Target}\n                label=\"Fight Plan\"\n                onClick={() => console.log('Fight plan clicked')}\n              />\n              <QuickActionButton\n                icon={MessageCircle}\n                label=\"Ask Coach\"\n                onClick={() => setLocation('/coach')}\n              />\n              <QuickActionButton\n                icon={TrendingUp}\n                label=\"View Stats\"\n                onClick={() => console.log('View stats clicked')}\n              />\n            </div>\n          </Card>\n        </div>\n\n        {/* Active Challenges */}\n        <div>\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-2xl font-bold\">This Week's Rounds</h2>\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-challenges\">\n              View All\n            </Button>\n          </div>\n          <div className=\"grid gap-4 md:grid-cols-3\">\n            {mockChallenges.map((challenge) => (\n              <ChallengeCard\n                key={challenge.id}\n                {...challenge}\n                onAction={() => console.log(`Challenge ${challenge.id} action`)}\n              />\n            ))}\n          </div>\n        </div>\n\n        {/* Recent Activity */}\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <Card className=\"p-6 backdrop-blur-xl bg-card/40 border-border/50\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"font-bold text-lg\">Recent Expenses</h3>\n              <Button variant=\"ghost\" size=\"sm\" onClick={() => setLocation('/expenses')} data-testid=\"button-view-all-expenses\">\n                View All\n              </Button>\n            </div>\n            <div className=\"space-y-1\">\n              {isLoadingTransactions ? (\n                <p className=\"text-sm text-muted-foreground text-center py-4\">\n                  Loading...\n                </p>\n              ) : isTransactionsError ? (\n                <p className=\"text-sm text-muted-foreground text-center py-4\">\n                  Please log in to view your expenses\n                </p>\n              ) : recentExpenses.length > 0 ? (\n                recentExpenses.map((expense) => (\n                  <ExpenseItem key={expense.id} {...expense} />\n                ))\n              ) : (\n                <p className=\"text-sm text-muted-foreground text-center py-4\">\n                  No expenses logged yet\n                </p>\n              )}\n            </div>\n          </Card>\n\n          <Card className=\"p-6 backdrop-blur-xl bg-card/40 border-border/50\">\n            <h3 className=\"font-bold text-lg mb-4\">Recent Wins</h3>\n            <div className=\"space-y-3\">\n              {mockAchievements.map((achievement) => (\n                <AchievementBadge key={achievement.id} {...achievement} />\n              ))}\n            </div>\n          </Card>\n        </div>\n      </main>\n\n      <AddExpenseModal\n        open={isAddExpenseOpen}\n        onOpenChange={setIsAddExpenseOpen}\n      />\n    </div>\n  );\n}\n","size_bytes":7844},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"client/src/components/examples/HealthScoreCard.tsx":{"content":"import HealthScoreCard from '../HealthScoreCard';\n\nexport default function HealthScoreCardExample() {\n  return <HealthScoreCard score={78} message=\"You're crushing it! Keep up the momentum.\" />;\n}\n","size_bytes":197},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/examples/ChallengeCard.tsx":{"content":"import ChallengeCard from '../ChallengeCard';\n\nexport default function ChallengeCardExample() {\n  return (\n    <ChallengeCard\n      id=\"1\"\n      title=\"No Coffee Shop Week\"\n      difficulty=\"Medium\"\n      points={500}\n      progress={42}\n      timeRemaining=\"3 days left\"\n      isActive={true}\n      onAction={() => console.log('Challenge action clicked')}\n    />\n  );\n}\n","size_bytes":371},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"client/src/components/examples/AddExpenseModal.tsx":{"content":"import { useState } from 'react';\nimport AddExpenseModal from '../AddExpenseModal';\nimport { Button } from '@/components/ui/button';\n\nexport default function AddExpenseModalExample() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div>\n      <Button onClick={() => setOpen(true)}>Open Modal</Button>\n      <AddExpenseModal \n        open={open} \n        onOpenChange={setOpen}\n        onAdd={(expense) => console.log('Expense added:', expense)}\n      />\n    </div>\n  );\n}\n","size_bytes":485},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/AddExpenseModal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Coffee, Car, ShoppingBag, Ticket, FileText, Tag } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { InsertTransaction } from \"@shared/schema\";\n\ninterface AddExpenseModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nconst categories = [\n  { name: 'Food', icon: Coffee, color: 'bg-chart-1/10 text-chart-1 border-chart-1/20' },\n  { name: 'Transport', icon: Car, color: 'bg-chart-2/10 text-chart-2 border-chart-2/20' },\n  { name: 'Shopping', icon: ShoppingBag, color: 'bg-chart-3/10 text-chart-3 border-chart-3/20' },\n  { name: 'Entertainment', icon: Ticket, color: 'bg-chart-4/10 text-chart-4 border-chart-4/20' },\n  { name: 'Bills', icon: FileText, color: 'bg-chart-5/10 text-chart-5 border-chart-5/20' },\n  { name: 'Other', icon: Tag, color: 'bg-muted/50 text-muted-foreground border-border' },\n];\n\nexport default function AddExpenseModal({ open, onOpenChange }: AddExpenseModalProps) {\n  const { toast } = useToast();\n  const [amount, setAmount] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n\n  const createExpenseMutation = useMutation({\n    mutationFn: async (data: { amount: string; category: string; description: string; date: string }) => {\n      return await apiRequest(\"/api/transactions\", \"POST\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/transactions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/transactions/untagged\"] });\n      toast({\n        title: \"Expense Added\",\n        description: \"Your expense has been logged successfully\",\n      });\n      setAmount(\"\");\n      setCategory(\"\");\n      setDescription(\"\");\n      onOpenChange(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add expense. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (amount && category && !createExpenseMutation.isPending) {\n      const transactionData = {\n        amount,\n        category,\n        description: description || `${category} expense`,\n        date: new Date().toISOString(),\n      };\n      createExpenseMutation.mutate(transactionData);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md backdrop-blur-2xl bg-card/80 border-primary/30 shadow-[0_0_40px_rgba(139,92,246,0.3)]\" data-testid=\"modal-add-expense\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold\">Log Expense</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"amount\" className=\"text-base font-semibold mb-2 block\">Amount</Label>\n            <div className=\"relative\">\n              <span className=\"absolute left-4 top-1/2 -translate-y-1/2 text-2xl font-bold text-muted-foreground\">₹</span>\n              <Input\n                id=\"amount\"\n                type=\"number\"\n                step=\"0.01\"\n                min=\"0\"\n                placeholder=\"0.00\"\n                value={amount}\n                onChange={(e) => setAmount(e.target.value)}\n                className=\"pl-8 text-3xl font-bold h-16 font-mono\"\n                data-testid=\"input-amount\"\n                autoFocus\n                disabled={createExpenseMutation.isPending}\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label className=\"text-base font-semibold mb-3 block\">Category</Label>\n            <div className=\"grid grid-cols-3 gap-2\">\n              {categories.map((cat) => {\n                const Icon = cat.icon;\n                return (\n                  <Button\n                    key={cat.name}\n                    type=\"button\"\n                    variant=\"outline\"\n                    className={`h-auto flex-col gap-2 p-3 ${category === cat.name ? cat.color : ''}`}\n                    onClick={() => setCategory(cat.name)}\n                    data-testid={`button-category-${cat.name.toLowerCase()}`}\n                    disabled={createExpenseMutation.isPending}\n                  >\n                    <Icon className=\"w-5 h-5\" />\n                    <span className=\"text-xs font-semibold\">{cat.name}</span>\n                  </Button>\n                );\n              })}\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"description\" className=\"text-base font-semibold mb-2 block\">\n              Description (optional)\n            </Label>\n            <Input\n              id=\"description\"\n              placeholder=\"What did you buy?\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              data-testid=\"input-description\"\n              disabled={createExpenseMutation.isPending}\n            />\n          </div>\n\n          <Button\n            type=\"submit\"\n            className=\"w-full h-12 text-base font-bold\"\n            disabled={!amount || !category || createExpenseMutation.isPending}\n            data-testid=\"button-submit-expense\"\n          >\n            {createExpenseMutation.isPending ? \"Adding...\" : \"Add Expense\"}\n          </Button>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5727},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/examples/StreakCounter.tsx":{"content":"import StreakCounter from '../StreakCounter';\n\nexport default function StreakCounterExample() {\n  return <StreakCounter days={12} />;\n}\n","size_bytes":136},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, boolean, jsonb, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Users table - Replit Auth compatible\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  onboardingStatus: text(\"onboarding_status\").notNull().default(\"step_1\"),\n  aaToken: text(\"aa_token\"),\n  kycCompleted: boolean(\"kyc_completed\").default(false),\n  mandateId: text(\"mandate_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const goals = pgTable(\"goals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  targetAmount: decimal(\"target_amount\", { precision: 10, scale: 2 }).notNull(),\n  currentAmount: decimal(\"current_amount\", { precision: 10, scale: 2 }).default(\"0\").notNull(),\n  isMain: boolean(\"is_main\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  description: text(\"description\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  category: text(\"category\"),\n  tag: text(\"tag\"),\n  date: timestamp(\"date\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const badges = pgTable(\"badges\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  icon: text(\"icon\").notNull(),\n  requirement: text(\"requirement\").notNull(),\n});\n\nexport const userBadges = pgTable(\"user_badges\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  badgeId: varchar(\"badge_id\").notNull().references(() => badges.id, { onDelete: \"cascade\" }),\n  earnedAt: timestamp(\"earned_at\").defaultNow().notNull(),\n});\n\nexport const quests = pgTable(\"quests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  difficulty: text(\"difficulty\").notNull(),\n  points: integer(\"points\").notNull(),\n  content: text(\"content\").notNull(),\n  icon: text(\"icon\").notNull(),\n});\n\nexport const userQuests = pgTable(\"user_quests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  questId: varchar(\"quest_id\").notNull().references(() => quests.id, { onDelete: \"cascade\" }),\n  completed: boolean(\"completed\").default(false).notNull(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const streaks = pgTable(\"streaks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  saveStreak: integer(\"save_streak\").default(0).notNull(),\n  fightStreak: integer(\"fight_streak\").default(0).notNull(),\n  lastSaveDate: timestamp(\"last_save_date\"),\n  lastFightDate: timestamp(\"last_fight_date\"),\n});\n\nexport const stashTransactions = pgTable(\"stash_transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  type: text(\"type\").notNull(),\n  goalId: varchar(\"goal_id\").references(() => goals.id, { onDelete: \"set null\" }),\n  status: text(\"status\").notNull().default(\"pending\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertGoalSchema = createInsertSchema(goals).omit({\n  id: true,\n  createdAt: true,\n  currentAmount: true,\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  date: z.coerce.date(),\n});\n\nexport const insertStashTransactionSchema = createInsertSchema(stashTransactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertGoal = z.infer<typeof insertGoalSchema>;\nexport type Goal = typeof goals.$inferSelect;\n\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\n\nexport type Badge = typeof badges.$inferSelect;\nexport type UserBadge = typeof userBadges.$inferSelect;\n\nexport type Quest = typeof quests.$inferSelect;\nexport type UserQuest = typeof userQuests.$inferSelect;\n\nexport type Streak = typeof streaks.$inferSelect;\n\nexport type InsertStashTransaction = z.infer<typeof insertStashTransactionSchema>;\nexport type StashTransaction = typeof stashTransactions.$inferSelect;\n","size_bytes":5805},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/pages/BudgetPage.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport BudgetCategoryCard from \"@/components/BudgetCategoryCard\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport StreakCounter from \"@/components/StreakCounter\";\nimport { Coffee, Car, ShoppingBag, Ticket, FileText, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function BudgetPage() {\n  // todo: remove mock functionality\n  const totalBudget = 2000;\n  const totalSpent = 1456;\n  const percentageUsed = (totalSpent / totalBudget) * 100;\n\n  // todo: remove mock functionality\n  const categories = [\n    { id: '1', category: 'Food & Dining', icon: Coffee, spent: 380, budget: 400, color: 'bg-chart-1/10 text-chart-1' },\n    { id: '2', category: 'Transport', icon: Car, spent: 150, budget: 200, color: 'bg-chart-2/10 text-chart-2' },\n    { id: '3', category: 'Shopping', icon: ShoppingBag, spent: 520, budget: 500, color: 'bg-chart-3/10 text-chart-3' },\n    { id: '4', category: 'Entertainment', icon: Ticket, spent: 200, budget: 300, color: 'bg-chart-4/10 text-chart-4' },\n    { id: '5', category: 'Bills', icon: FileText, spent: 206, budget: 600, color: 'bg-chart-5/10 text-chart-5' },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"sticky top-0 z-50 border-b border-primary/20 bg-background/30 backdrop-blur-2xl supports-[backdrop-filter]:bg-background/30 shadow-[0_8px_32px_rgba(139,92,246,0.1)]\">\n        <div className=\"container mx-auto px-4 py-3 flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-back\">\n                <ArrowLeft className=\"w-5 h-5\" />\n              </Button>\n            </Link>\n            <h1 className=\"text-xl font-bold\">The Fight Plan</h1>\n            <StreakCounter days={12} />\n          </div>\n          <ThemeToggle />\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-6 space-y-6 max-w-4xl\">\n        {/* Overview Card */}\n        <Card className=\"p-6 backdrop-blur-xl bg-card/40 border-primary/20 shadow-[0_0_30px_rgba(139,92,246,0.12)] relative overflow-hidden\">\n          <div className=\"absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-secondary/5 pointer-events-none\" />\n          <h2 className=\"text-2xl font-bold mb-6 relative z-10\">Monthly Budget Overview</h2>\n          <div className=\"space-y-4 relative z-10\">\n            <div className=\"flex items-baseline justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground mb-1\">Total Spent</p>\n                <p className=\"text-4xl font-bold font-mono\">${totalSpent}</p>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-sm text-muted-foreground mb-1\">Budget</p>\n                <p className=\"text-2xl font-bold font-mono text-muted-foreground\">${totalBudget}</p>\n              </div>\n            </div>\n            <Progress value={percentageUsed} className=\"h-3\" />\n            <div className=\"flex items-center justify-between text-sm\">\n              <span className=\"text-muted-foreground\">\n                {percentageUsed.toFixed(0)}% of budget used\n              </span>\n              <span className=\"font-bold text-secondary\">\n                ${(totalBudget - totalSpent).toFixed(0)} remaining\n              </span>\n            </div>\n          </div>\n        </Card>\n\n        {/* Categories */}\n        <div>\n          <h2 className=\"text-2xl font-bold mb-4\">Categories</h2>\n          <div className=\"grid gap-4 sm:grid-cols-2\">\n            {categories.map((cat) => (\n              <BudgetCategoryCard key={cat.id} {...cat} />\n            ))}\n          </div>\n        </div>\n\n        {/* Tips Card */}\n        <Card className=\"p-6 backdrop-blur-xl bg-primary/10 border-primary/30 shadow-[0_0_25px_rgba(139,92,246,0.2)]\">\n          <h3 className=\"font-bold text-lg mb-2 flex items-center gap-2\">\n            <span>💪</span>\n            <span>Coach's Tip</span>\n          </h3>\n          <p className=\"text-sm text-muted-foreground\">\n            You're over budget on Shopping but crushing it on Bills! Try moving some of that shopping energy to savings. You got this!\n          </p>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":4462},"client/src/components/examples/BudgetCategoryCard.tsx":{"content":"import BudgetCategoryCard from '../BudgetCategoryCard';\nimport { Coffee } from 'lucide-react';\n\nexport default function BudgetCategoryCardExample() {\n  return (\n    <BudgetCategoryCard\n      id=\"1\"\n      category=\"Food & Dining\"\n      icon={Coffee}\n      spent={280}\n      budget={400}\n      color=\"bg-chart-1/10 text-chart-1\"\n    />\n  );\n}\n","size_bytes":341},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 240 35% 8%;\n\n  --foreground: 220 100% 95%;\n\n  --border: 240 80% 40%;\n\n  --card: 240 35% 12%;\n\n  --card-foreground: 220 100% 95%;\n\n  --card-border: 240 80% 45%;\n\n  --sidebar: 222 47% 12%;\n\n  --sidebar-foreground: 210 40% 98%;\n\n  --sidebar-border: 217 33% 18%;\n\n  --sidebar-primary: 280 85% 32%;\n\n  --sidebar-primary-foreground: 280 10% 98%;\n\n  --sidebar-accent: 280 12% 88%;\n\n  --sidebar-accent-foreground: 280 18% 18%;\n\n  --sidebar-ring: 280 85% 32%;\n\n  --popover: 0 0% 92%;\n\n  --popover-foreground: 0 0% 9%;\n\n  --popover-border: 0 0% 84%;\n\n  --primary: 260 100% 65%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 200 100% 55%;\n\n  --secondary-foreground: 0 0% 100%;\n\n  --muted: 240 20% 18%;\n\n  --muted-foreground: 220 15% 70%;\n\n  --accent: 280 100% 70%;\n\n  --accent-foreground: 0 0% 100%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 0 0% 72%;\n  --ring: 280 85% 32%;\n  --chart-1: 260 100% 65%;\n  --chart-2: 200 100% 55%;\n  --chart-3: 280 100% 70%;\n  --chart-4: 240 100% 60%;\n  --chart-5: 180 100% 50%;\n\n  --font-sans: Space Grotesk, Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, Menlo, monospace;\n  --radius: .5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.1);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px -1px hsl(0 0% 0% / 0.1);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.1), 0px 2px 4px -2px hsl(0 0% 0% / 0.1);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.15), 0px 3px 7px -3px hsl(0 0% 0% / 0.1);\n  --shadow-lg: 0px 10px 20px -3px hsl(0 0% 0% / 0.2), 0px 4px 12px -4px hsl(0 0% 0% / 0.15);\n  --shadow-xl: 0px 20px 30px -5px hsl(0 0% 0% / 0.25), 0px 8px 16px -6px hsl(0 0% 0% / 0.2);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.3);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 240 35% 6%;\n\n  --foreground: 220 100% 95%;\n\n  --border: 240 80% 35%;\n\n  --card: 240 35% 10%;\n\n  --card-foreground: 220 100% 95%;\n\n  --card-border: 240 80% 40%;\n\n  --sidebar: 222 47% 9%;\n\n  --sidebar-foreground: 210 40% 98%;\n\n  --sidebar-border: 217 33% 17%;\n\n  --sidebar-primary: 280 78% 35%;\n\n  --sidebar-primary-foreground: 280 8% 98%;\n\n  --sidebar-accent: 280 10% 18%;\n\n  --sidebar-accent-foreground: 280 10% 88%;\n\n  --sidebar-ring: 280 78% 35%;\n\n  --popover: 0 0% 14%;\n\n  --popover-foreground: 0 0% 96%;\n\n  --popover-border: 0 0% 22%;\n\n  --primary: 260 100% 68%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 200 100% 58%;\n\n  --secondary-foreground: 0 0% 100%;\n\n  --muted: 240 20% 16%;\n\n  --muted-foreground: 220 15% 75%;\n\n  --accent: 280 100% 72%;\n\n  --accent-foreground: 0 0% 100%;\n\n  --destructive: 0 84% 65%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 0 0% 34%;\n  --ring: 280 78% 35%;\n  --chart-1: 260 100% 68%;\n  --chart-2: 200 100% 58%;\n  --chart-3: 280 100% 72%;\n  --chart-4: 240 100% 63%;\n  --chart-5: 180 100% 55%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.08);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.15);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.15), 0px 1px 2px -1px hsl(0 0% 0% / 0.15);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.15), 0px 2px 4px -2px hsl(0 0% 0% / 0.15);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.2), 0px 3px 7px -3px hsl(0 0% 0% / 0.15);\n  --shadow-lg: 0px 10px 20px -3px hsl(0 0% 0% / 0.25), 0px 4px 12px -4px hsl(0 0% 0% / 0.2);\n  --shadow-xl: 0px 20px 30px -5px hsl(0 0% 0% / 0.3), 0px 8px 16px -6px hsl(0 0% 0% / 0.25);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.35);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9783},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ExpenseItem.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Coffee, Car, ShoppingBag, Ticket, FileText, Tag } from \"lucide-react\";\n\ninterface ExpenseItemProps {\n  id: string;\n  category: string;\n  description: string;\n  amount: number;\n  date: string;\n}\n\nexport default function ExpenseItem({ id, category, description, amount, date }: ExpenseItemProps) {\n  const getCategoryIcon = (cat: string) => {\n    const iconClass = \"w-5 h-5\";\n    switch (cat.toLowerCase()) {\n      case 'food': return <Coffee className={iconClass} />;\n      case 'transport': return <Car className={iconClass} />;\n      case 'shopping': return <ShoppingBag className={iconClass} />;\n      case 'entertainment': return <Ticket className={iconClass} />;\n      case 'bills': return <FileText className={iconClass} />;\n      default: return <Tag className={iconClass} />;\n    }\n  };\n\n  const getCategoryColor = (cat: string) => {\n    switch (cat.toLowerCase()) {\n      case 'food': return 'bg-chart-1/10 text-chart-1';\n      case 'transport': return 'bg-chart-2/10 text-chart-2';\n      case 'shopping': return 'bg-chart-3/10 text-chart-3';\n      case 'entertainment': return 'bg-chart-4/10 text-chart-4';\n      case 'bills': return 'bg-chart-5/10 text-chart-5';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  return (\n    <div className=\"flex items-center gap-3 p-3 hover-elevate rounded-md\" data-testid={`item-expense-${id}`}>\n      <div className={`p-2 rounded-full ${getCategoryColor(category)}`}>\n        {getCategoryIcon(category)}\n      </div>\n      <div className=\"flex-1 min-w-0\">\n        <p className=\"font-semibold text-sm truncate\" data-testid={`text-description-${id}`}>{description}</p>\n        <div className=\"flex items-center gap-2\">\n          <Badge variant=\"secondary\" className=\"text-xs\" data-testid={`badge-category-${id}`}>\n            {category}\n          </Badge>\n          <span className=\"text-xs text-muted-foreground\" data-testid={`text-date-${id}`}>{date}</span>\n        </div>\n      </div>\n      <div className=\"text-right\">\n        <p className=\"font-bold text-base font-mono\" data-testid={`text-amount-${id}`}>\n          -${amount.toFixed(2)}\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2208},"client/src/components/BudgetCategoryCard.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface BudgetCategoryCardProps {\n  id: string;\n  category: string;\n  icon: LucideIcon;\n  spent: number;\n  budget: number;\n  color: string;\n}\n\nexport default function BudgetCategoryCard({\n  id,\n  category,\n  icon: Icon,\n  spent,\n  budget,\n  color\n}: BudgetCategoryCardProps) {\n  const percentage = Math.min((spent / budget) * 100, 100);\n  const isOverBudget = spent > budget;\n\n  return (\n    <Card className=\"p-4 backdrop-blur-xl bg-card/40 border-border/50 hover:border-primary/30 transition-all\" data-testid={`card-budget-${id}`}>\n      <div className=\"flex items-start gap-3\">\n        <div className={`p-2 rounded-lg ${color}`}>\n          <Icon className=\"w-5 h-5\" />\n        </div>\n        <div className=\"flex-1 min-w-0\">\n          <h4 className=\"font-bold text-sm mb-1\" data-testid={`text-category-${id}`}>{category}</h4>\n          <Progress \n            value={percentage} \n            className=\"h-2 mb-2\"\n          />\n          <div className=\"flex items-baseline justify-between\">\n            <div>\n              <span className={`font-bold text-lg font-mono ${isOverBudget ? 'text-destructive' : ''}`} data-testid={`text-spent-${id}`}>\n                ${spent}\n              </span>\n              <span className=\"text-xs text-muted-foreground\"> / ${budget}</span>\n            </div>\n            <span className={`text-xs font-semibold ${isOverBudget ? 'text-destructive' : 'text-muted-foreground'}`} data-testid={`text-percentage-${id}`}>\n              {percentage.toFixed(0)}%\n            </span>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":1718},"client/src/pages/GlowUp.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { TrendingUp, Plus, Target, ArrowUpCircle, ArrowDownCircle } from \"lucide-react\";\nimport type { Goal, StashTransaction } from \"@shared/schema\";\n\nexport default function GlowUp() {\n  const { toast } = useToast();\n  const [isNewGoalOpen, setIsNewGoalOpen] = useState(false);\n  const [isStashOpen, setIsStashOpen] = useState(false);\n  const [goalName, setGoalName] = useState(\"\");\n  const [goalAmount, setGoalAmount] = useState(\"\");\n  const [stashAmount, setStashAmount] = useState(\"\");\n  const [selectedGoalId, setSelectedGoalId] = useState(\"\");\n\n  const { data: goals = [] } = useQuery<Goal[]>({\n    queryKey: [\"/api/goals\"],\n  });\n\n  const { data: totalStashedData } = useQuery<{ total: number }>({\n    queryKey: [\"/api/stash/total\"],\n  });\n\n  const { data: stashTransactions = [] } = useQuery<StashTransaction[]>({\n    queryKey: [\"/api/stash\"],\n  });\n\n  const createGoalMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"/api/goals\", \"POST\", {\n        name: goalName,\n        targetAmount: goalAmount,\n        isMain: goals.length === 0,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/goals\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/goals/main\"] });\n      setIsNewGoalOpen(false);\n      setGoalName(\"\");\n      setGoalAmount(\"\");\n      toast({\n        title: \"Goal Created!\",\n        description: \"Your new savings quest has begun.\",\n      });\n    },\n  });\n\n  const stashMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"/api/stash\", \"POST\", {\n        amount: stashAmount,\n        type: \"stash\",\n        goalId: selectedGoalId || null,\n        status: \"completed\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/stash\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stash/total\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/goals\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/streak\"] });\n      setIsStashOpen(false);\n      setStashAmount(\"\");\n      setSelectedGoalId(\"\");\n      toast({\n        title: \"Stashed!\",\n        description: \"Your money is now growing in your Locker.\",\n      });\n    },\n  });\n\n  const totalStashed = totalStashedData?.total || 0;\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex justify-between items-start\">\n        <div>\n          <h1 className=\"text-4xl font-bold mb-2\" data-testid=\"text-page-title\">The Glow-Up</h1>\n          <p className=\"text-muted-foreground\">Your Locker • Watch your money grow</p>\n        </div>\n        <Dialog open={isStashOpen} onOpenChange={setIsStashOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-stash-cash\">\n              <TrendingUp className=\"w-4 h-4 mr-2\" />\n              Stash Cash\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Stash Cash</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"stash-amount\">Amount (₹)</Label>\n                <Input\n                  id=\"stash-amount\"\n                  type=\"number\"\n                  placeholder=\"500\"\n                  value={stashAmount}\n                  onChange={(e) => setStashAmount(e.target.value)}\n                  data-testid=\"input-stash-amount\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"goal-select\">Allocate to Goal (Optional)</Label>\n                <select\n                  id=\"goal-select\"\n                  className=\"w-full h-9 rounded-md border border-input bg-background px-3 py-1\"\n                  value={selectedGoalId}\n                  onChange={(e) => setSelectedGoalId(e.target.value)}\n                  data-testid=\"select-goal\"\n                >\n                  <option value=\"\">General Savings</option>\n                  {goals.map((goal) => (\n                    <option key={goal.id} value={goal.id}>\n                      {goal.name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              <Button\n                onClick={() => stashMutation.mutate()}\n                disabled={stashMutation.isPending || !stashAmount}\n                className=\"w-full\"\n                data-testid=\"button-confirm-stash\"\n              >\n                Stash ₹{stashAmount || 0}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card data-testid=\"card-locker-balance\">\n        <CardContent className=\"p-8\">\n          <div className=\"text-center\">\n            <p className=\"text-sm text-muted-foreground mb-2\">Total in Locker</p>\n            <p className=\"text-5xl font-bold mb-4\" data-testid=\"text-locker-balance\">\n              ₹{totalStashed.toLocaleString('en-IN')}\n            </p>\n            <p className=\"text-sm text-muted-foreground\">Growing in Liquid Mutual Fund</p>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold\">Your Goals</h2>\n        <Dialog open={isNewGoalOpen} onOpenChange={setIsNewGoalOpen}>\n          <DialogTrigger asChild>\n            <Button variant=\"outline\" data-testid=\"button-new-goal\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Goal\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Create New Goal</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"new-goal-name\">Goal Name</Label>\n                <Input\n                  id=\"new-goal-name\"\n                  placeholder=\"e.g., Dream Vacation\"\n                  value={goalName}\n                  onChange={(e) => setGoalName(e.target.value)}\n                  data-testid=\"input-new-goal-name\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"new-goal-amount\">Target Amount (₹)</Label>\n                <Input\n                  id=\"new-goal-amount\"\n                  type=\"number\"\n                  placeholder=\"25000\"\n                  value={goalAmount}\n                  onChange={(e) => setGoalAmount(e.target.value)}\n                  data-testid=\"input-new-goal-amount\"\n                />\n              </div>\n              <Button\n                onClick={() => createGoalMutation.mutate()}\n                disabled={createGoalMutation.isPending || !goalName || !goalAmount}\n                className=\"w-full\"\n                data-testid=\"button-create-goal\"\n              >\n                Create Goal\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        {goals.map((goal) => {\n          const progress = (parseFloat(goal.currentAmount) / parseFloat(goal.targetAmount)) * 100;\n          return (\n            <Card key={goal.id} data-testid={`card-goal-${goal.id}`}>\n              <CardHeader>\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Target className=\"w-5 h-5 text-primary\" />\n                      {goal.name}\n                      {goal.isMain && (\n                        <span className=\"text-xs bg-primary/10 text-primary px-2 py-1 rounded\">\n                          Main\n                        </span>\n                      )}\n                    </CardTitle>\n                    <CardDescription className=\"mt-1\">\n                      ₹{parseFloat(goal.currentAmount).toLocaleString('en-IN')} of ₹{parseFloat(goal.targetAmount).toLocaleString('en-IN')}\n                    </CardDescription>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-2xl font-bold\">{progress.toFixed(0)}%</div>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"w-full bg-muted rounded-full h-3\">\n                  <div\n                    className=\"bg-primary h-3 rounded-full transition-all\"\n                    style={{ width: `${Math.min(progress, 100)}%` }}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {goals.length === 0 && (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <Target className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n            <p className=\"text-muted-foreground mb-4\">No goals yet. Create your first savings quest!</p>\n            <Button onClick={() => setIsNewGoalOpen(true)} data-testid=\"button-create-first-goal\">\n              Create Goal\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      <div>\n        <h2 className=\"text-2xl font-bold mb-4\">Recent Activity</h2>\n        <Card>\n          <CardContent className=\"p-0\">\n            {stashTransactions.length > 0 ? (\n              <div className=\"divide-y\">\n                {stashTransactions.slice(0, 10).map((transaction) => (\n                  <div\n                    key={transaction.id}\n                    className=\"p-4 flex justify-between items-center\"\n                    data-testid={`transaction-${transaction.id}`}\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                        transaction.type === 'stash' ? 'bg-primary/10' : 'bg-destructive/10'\n                      }`}>\n                        {transaction.type === 'stash' ? (\n                          <ArrowUpCircle className=\"w-5 h-5 text-primary\" />\n                        ) : (\n                          <ArrowDownCircle className=\"w-5 h-5 text-destructive\" />\n                        )}\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">\n                          {transaction.type === 'stash' ? 'Stashed' : 'Withdrawn'}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {new Date(transaction.createdAt).toLocaleDateString('en-IN')}\n                        </p>\n                      </div>\n                    </div>\n                    <div className={`text-lg font-bold ${\n                      transaction.type === 'stash' ? 'text-primary' : 'text-destructive'\n                    }`}>\n                      {transaction.type === 'stash' ? '+' : '-'}₹{parseFloat(transaction.amount).toLocaleString('en-IN')}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"p-12 text-center text-muted-foreground\">\n                No transactions yet. Start stashing to see your activity here!\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11796},"server/geminiService.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\n\nexport async function chatWithFinancialAssistant(\n  message: string,\n  context?: {\n    userName?: string;\n    totalStashed?: number;\n    saveStreak?: number;\n    ickAmount?: number;\n  }\n): Promise<string> {\n  const systemPrompt = `You are a friendly, motivational financial partner for \"The Financial Glow-Up\" app designed for young adults in India. Your tone is encouraging, non-judgmental, and straightforward.\n\nYour role:\n- Help users understand their spending habits\n- Provide financial advice and tips\n- Celebrate their wins and progress\n- Motivate them to fight their \"Icks\" (impulse buys)\n- Explain financial concepts in simple terms\n\nRemember:\n- Use simple language, avoid heavy financial jargon\n- Be positive and supportive\n- Keep responses concise and actionable\n- Use rupee (₹) for currency\n${context ? `\\nUser Context:\\n- Name: ${context.userName || 'User'}\\n- Total Stashed: ₹${context.totalStashed || 0}\\n- Save Streak: ${context.saveStreak || 0} days\\n- Recent Icks: ₹${context.ickAmount || 0}` : ''}`;\n\n  const response = await ai.models.generateContent({\n    model: \"gemini-2.5-flash\",\n    config: {\n      systemInstruction: systemPrompt,\n    },\n    contents: message,\n  });\n\n  return response.text || \"I'm here to help! Could you ask that again?\";\n}\n\nexport async function categorizePurchase(description: string, amount: number): Promise<{\n  suggestedCategory: 'Need' | 'Want' | 'Ick';\n  reasoning: string;\n}> {\n  try {\n    const prompt = `Categorize this purchase:\nDescription: ${description}\nAmount: ₹${amount}\n\nCategories:\n- Need: Essential expenses (rent, groceries, bills, transportation, medicine)\n- Want: Non-essential but reasonable (dining out, entertainment, hobbies)\n- Ick: Impulse buys, wasteful spending, unnecessary subscriptions\n\nRespond with JSON only.`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      config: {\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            suggestedCategory: { type: \"string\", enum: [\"Need\", \"Want\", \"Ick\"] },\n            reasoning: { type: \"string\" },\n          },\n          required: [\"suggestedCategory\", \"reasoning\"],\n        },\n      },\n      contents: prompt,\n    });\n\n    const rawJson = response.text;\n    if (rawJson) {\n      return JSON.parse(rawJson);\n    }\n    throw new Error(\"Empty response from model\");\n  } catch (error) {\n    return {\n      suggestedCategory: \"Want\",\n      reasoning: \"Unable to categorize automatically. Please review.\",\n    };\n  }\n}\n\nexport async function generateFinancialInsight(\n  totalSpent: number,\n  ickSpent: number,\n  wantSpent: number,\n  needSpent: number\n): Promise<string> {\n  const prompt = `Generate a short, motivational financial insight for a user with these stats:\n- Total spent: ₹${totalSpent}\n- Needs: ₹${needSpent}\n- Wants: ₹${wantSpent}\n- Icks (wasteful): ₹${ickSpent}\n\nProvide a 2-3 sentence insight that's encouraging and actionable.`;\n\n  const response = await ai.models.generateContent({\n    model: \"gemini-2.5-flash\",\n    contents: prompt,\n  });\n\n  return response.text || \"Keep fighting those Icks! Every rupee saved gets you closer to your goals.\";\n}\n","size_bytes":3338},"client/src/pages/LevelUp.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { BookOpen, Star } from \"lucide-react\";\n\nexport default function LevelUp() {\n  const quests = [\n    {\n      id: \"1\",\n      title: \"The Subscription Slayer\",\n      description: \"Learn to audit and cancel unnecessary subscriptions\",\n      difficulty: \"Easy\",\n      points: 100,\n      icon: \"📱\",\n      content: \"Subscriptions can drain your wallet without you noticing. Learn how to track, evaluate, and cancel subscriptions you don't need.\",\n    },\n    {\n      id: \"2\",\n      title: \"Credit Score 101\",\n      description: \"Understanding your credit score and how to improve it\",\n      difficulty: \"Medium\",\n      points: 250,\n      icon: \"📊\",\n      content: \"Your credit score affects loan rates and approvals. Learn what impacts it and how to build a strong credit history.\",\n    },\n    {\n      id: \"3\",\n      title: \"Emergency Fund Master\",\n      description: \"Build a safety net for unexpected expenses\",\n      difficulty: \"Medium\",\n      points: 300,\n      icon: \"🛡️\",\n      content: \"Financial emergencies happen. Learn how to build and maintain an emergency fund that gives you peace of mind.\",\n    },\n    {\n      id: \"4\",\n      title: \"Investment Basics\",\n      description: \"Introduction to investing for beginners\",\n      difficulty: \"Hard\",\n      points: 500,\n      icon: \"💰\",\n      content: \"Make your money work for you. Learn about different investment options, risk management, and starting your investment journey.\",\n    },\n    {\n      id: \"5\",\n      title: \"Tax Optimization\",\n      description: \"Legal ways to reduce your tax burden\",\n      difficulty: \"Hard\",\n      points: 400,\n      icon: \"🧾\",\n      content: \"Don't pay more tax than necessary. Learn about deductions, exemptions, and tax-saving investments available in India.\",\n    },\n    {\n      id: \"6\",\n      title: \"Budget Like a Boss\",\n      description: \"Master the 50/30/20 budgeting rule\",\n      difficulty: \"Easy\",\n      points: 150,\n      icon: \"📈\",\n      content: \"The 50/30/20 rule makes budgeting simple: 50% needs, 30% wants, 20% savings. Learn how to apply it to your income.\",\n    },\n  ];\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case \"Easy\":\n        return \"bg-primary/10 text-primary\";\n      case \"Medium\":\n        return \"bg-secondary/10 text-secondary\";\n      case \"Hard\":\n        return \"bg-destructive/10 text-destructive\";\n      default:\n        return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-4xl font-bold mb-2\" data-testid=\"text-page-title\">Level Up</h1>\n        <p className=\"text-muted-foreground\">Complete quests to master financial literacy</p>\n      </div>\n\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        {quests.map((quest) => (\n          <Card key={quest.id} className=\"hover-elevate cursor-pointer\" data-testid={`card-quest-${quest.id}`}>\n            <CardHeader>\n              <div className=\"flex justify-between items-start mb-2\">\n                <div className=\"text-4xl\">{quest.icon}</div>\n                <div className=\"flex gap-2\">\n                  <Badge className={getDifficultyColor(quest.difficulty)}>\n                    {quest.difficulty}\n                  </Badge>\n                  <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                    <Star className=\"w-3 h-3\" />\n                    {quest.points}\n                  </Badge>\n                </div>\n              </div>\n              <CardTitle>{quest.title}</CardTitle>\n              <CardDescription>{quest.description}</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-muted-foreground mb-4\">{quest.content}</p>\n              <div className=\"flex items-center gap-2 text-sm text-primary\">\n                <BookOpen className=\"w-4 h-4\" />\n                <span>Coming Soon</span>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <Card className=\"bg-muted/50\">\n        <CardContent className=\"p-8 text-center\">\n          <BookOpen className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-xl font-bold mb-2\">Interactive Quests Coming Soon</h3>\n          <p className=\"text-muted-foreground\">\n            Complete bite-sized financial literacy lessons to earn badges and level up your money skills.\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4633},"client/src/components/AppSidebar.tsx":{"content":"import { Home, Zap, TrendingUp, BookOpen, Trophy, User } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n} from \"@/components/ui/sidebar\";\n\nconst menuItems = [\n  {\n    title: \"HQ\",\n    url: \"/\",\n    icon: Home,\n    testId: \"link-hq\",\n  },\n  {\n    title: \"The Fight\",\n    url: \"/fight\",\n    icon: Zap,\n    testId: \"link-fight\",\n  },\n  {\n    title: \"The Glow-Up\",\n    url: \"/glow-up\",\n    icon: TrendingUp,\n    testId: \"link-glow-up\",\n  },\n  {\n    title: \"Level Up\",\n    url: \"/level-up\",\n    icon: BookOpen,\n    testId: \"link-level-up\",\n  },\n  {\n    title: \"Trophy Case\",\n    url: \"/trophy-case\",\n    icon: Trophy,\n    testId: \"link-trophy-case\",\n  },\n  {\n    title: \"Profile\",\n    url: \"/profile\",\n    icon: User,\n    testId: \"link-profile\",\n  },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"p-6\">\n        <h1 className=\"text-xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n          The Financial Glow-Up\n        </h1>\n      </SidebarHeader>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild isActive={location === item.url}>\n                    <Link href={item.url} data-testid={item.testId}>\n                      <item.icon />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n}\n","size_bytes":1989},"client/src/pages/Profile.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { LogOut, MessageCircle, Send } from \"lucide-react\";\n\nexport default function Profile() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [chatMessage, setChatMessage] = useState(\"\");\n  const [chatHistory, setChatHistory] = useState<Array<{ role: 'user' | 'assistant'; message: string }>>([]);\n\n  const chatMutation = useMutation({\n    mutationFn: async (message: string) => {\n      const response = await apiRequest(\"/api/ai/chat\", \"POST\", { message });\n      return response;\n    },\n    onSuccess: (data: any) => {\n      setChatHistory((prev) => [...prev, { role: 'assistant', message: data.response }]);\n      setChatMessage(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to get AI response. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (!chatMessage.trim()) return;\n    \n    setChatHistory((prev) => [...prev, { role: 'user', message: chatMessage }]);\n    chatMutation.mutate(chatMessage);\n  };\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const initials = user?.firstName && user?.lastName\n    ? `${user.firstName[0]}${user.lastName[0]}`\n    : user?.email?.[0]?.toUpperCase() || \"U\";\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-4xl font-bold mb-2\" data-testid=\"text-page-title\">Profile</h1>\n        <p className=\"text-muted-foreground\">Your account and AI assistant</p>\n      </div>\n\n      <Card data-testid=\"card-user-info\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center gap-4 mb-6\">\n            <Avatar className=\"w-20 h-20\">\n              <AvatarImage src={user?.profileImageUrl || undefined} />\n              <AvatarFallback className=\"text-2xl\">{initials}</AvatarFallback>\n            </Avatar>\n            <div>\n              <h2 className=\"text-2xl font-bold\" data-testid=\"text-user-name\">\n                {user?.firstName || user?.email || \"User\"}\n              </h2>\n              <p className=\"text-muted-foreground\" data-testid=\"text-user-email\">{user?.email}</p>\n            </div>\n          </div>\n          <Button \n            variant=\"outline\" \n            onClick={handleLogout}\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"w-4 h-4 mr-2\" />\n            Log Out\n          </Button>\n        </CardContent>\n      </Card>\n\n      <Card data-testid=\"card-ai-assistant\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <MessageCircle className=\"w-5 h-5 text-primary\" />\n            Financial Assistant\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"bg-muted/50 rounded-lg p-4 min-h-[300px] max-h-[400px] overflow-y-auto\">\n              {chatHistory.length === 0 ? (\n                <div className=\"text-center text-muted-foreground py-12\">\n                  <MessageCircle className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                  <p>Ask me anything about personal finance!</p>\n                  <p className=\"text-sm mt-2\">Try: \"How can I save more money?\" or \"What's a good emergency fund?\"</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {chatHistory.map((chat, index) => (\n                    <div\n                      key={index}\n                      className={`flex ${chat.role === 'user' ? 'justify-end' : 'justify-start'}`}\n                      data-testid={`chat-message-${index}`}\n                    >\n                      <div\n                        className={`max-w-[80%] rounded-lg p-3 ${\n                          chat.role === 'user'\n                            ? 'bg-primary text-primary-foreground'\n                            : 'bg-card border'\n                        }`}\n                      >\n                        <p className=\"text-sm whitespace-pre-wrap\">{chat.message}</p>\n                      </div>\n                    </div>\n                  ))}\n                  {chatMutation.isPending && (\n                    <div className=\"flex justify-start\">\n                      <div className=\"bg-card border rounded-lg p-3\">\n                        <p className=\"text-sm text-muted-foreground\">Thinking...</p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n            <div className=\"flex gap-2\">\n              <Input\n                placeholder=\"Ask about budgeting, saving, or investments...\"\n                value={chatMessage}\n                onChange={(e) => setChatMessage(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                disabled={chatMutation.isPending}\n                data-testid=\"input-chat-message\"\n              />\n              <Button\n                onClick={handleSendMessage}\n                disabled={chatMutation.isPending || !chatMessage.trim()}\n                data-testid=\"button-send-message\"\n              >\n                <Send className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            {!process.env.GEMINI_API_KEY && (\n              <p className=\"text-xs text-muted-foreground text-center\">\n                Note: AI assistant requires Gemini API key to be configured\n              </p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Account Settings</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <h3 className=\"font-medium mb-2\">Onboarding Status</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {user?.onboardingStatus === 'completed' ? 'Completed' : `Step ${user?.onboardingStatus?.replace('step_', '') || '1'}`}\n            </p>\n          </div>\n          <div>\n            <h3 className=\"font-medium mb-2\">KYC Status</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {user?.kycCompleted ? 'Verified' : 'Pending'}\n            </p>\n          </div>\n          <div>\n            <h3 className=\"font-medium mb-2\">Account Aggregator</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {user?.aaToken ? 'Connected' : 'Not Connected'}\n            </p>\n          </div>\n          <div>\n            <h3 className=\"font-medium mb-2\">UPI Mandate</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {user?.mandateId ? 'Approved' : 'Not Set Up'}\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7207},"client/src/pages/Onboarding.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Check } from \"lucide-react\";\n\nexport default function Onboarding() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [goalName, setGoalName] = useState(\"\");\n  const [goalAmount, setGoalAmount] = useState(\"\");\n\n  const updateOnboardingMutation = useMutation({\n    mutationFn: async (status: string) => {\n      await apiRequest(\"/api/user/onboarding\", \"PATCH\", { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n  });\n\n  const createGoalMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"/api/goals\", \"POST\", {\n        name: goalName,\n        targetAmount: goalAmount,\n        isMain: true,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/goals\"] });\n    },\n  });\n\n  const handleStep1Complete = async () => {\n    if (!goalName || !goalAmount) {\n      toast({\n        title: \"Hold up!\",\n        description: \"Please name your goal and set a target amount.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      await createGoalMutation.mutateAsync();\n      await updateOnboardingMutation.mutateAsync(\"step_2\");\n      setCurrentStep(2);\n      toast({\n        title: \"Quest Set!\",\n        description: `Your ${goalName} journey begins now.`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create your goal. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleStep2Complete = async () => {\n    await updateOnboardingMutation.mutateAsync(\"step_3\");\n    setCurrentStep(3);\n    toast({\n      title: \"Coming Soon!\",\n      description: \"Bank connection will be available soon. Moving to next step.\",\n    });\n  };\n\n  const handleStep3Complete = async () => {\n    await updateOnboardingMutation.mutateAsync(\"step_4\");\n    setCurrentStep(4);\n    toast({\n      title: \"Almost There!\",\n      description: \"KYC integration coming soon. Moving to final step.\",\n    });\n  };\n\n  const handleStep4Complete = async () => {\n    await updateOnboardingMutation.mutateAsync(\"completed\");\n    toast({\n      title: \"Welcome to The Fight!\",\n      description: \"Your financial glow-up starts now!\",\n    });\n    window.location.href = \"/\";\n  };\n\n  const steps = [\n    { number: 1, title: \"Set Quest\", description: \"Name your first savings goal\" },\n    { number: 2, title: \"Connect Intel\", description: \"Link your bank account\" },\n    { number: 3, title: \"Unlock Locker\", description: \"Complete eKYC\" },\n    { number: 4, title: \"Enable Stash\", description: \"Approve UPI Mandate\" },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-2xl\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold mb-2\">Welcome to Bootcamp</h1>\n          <p className=\"text-muted-foreground\">Let's get you ready for The Fight</p>\n        </div>\n\n        <div className=\"flex justify-between mb-8\">\n          {steps.map((step) => (\n            <div key={step.number} className=\"flex flex-col items-center\">\n              <div\n                className={`w-12 h-12 rounded-full flex items-center justify-center font-bold mb-2 ${\n                  currentStep > step.number\n                    ? \"bg-primary text-primary-foreground\"\n                    : currentStep === step.number\n                    ? \"bg-primary text-primary-foreground\"\n                    : \"bg-muted text-muted-foreground\"\n                }`}\n                data-testid={`step-indicator-${step.number}`}\n              >\n                {currentStep > step.number ? <Check className=\"w-6 h-6\" /> : step.number}\n              </div>\n              <p className=\"text-xs font-medium text-center\">{step.title}</p>\n            </div>\n          ))}\n        </div>\n\n        {currentStep === 1 && (\n          <Card data-testid=\"card-step-1\">\n            <CardHeader>\n              <CardTitle>Set Your Quest</CardTitle>\n              <CardDescription>What are you saving for? Give it a name and a target.</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"goal-name\">Goal Name</Label>\n                <Input\n                  id=\"goal-name\"\n                  placeholder=\"e.g., Europe Trip, New Laptop\"\n                  value={goalName}\n                  onChange={(e) => setGoalName(e.target.value)}\n                  data-testid=\"input-goal-name\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"goal-amount\">Target Amount (₹)</Label>\n                <Input\n                  id=\"goal-amount\"\n                  type=\"number\"\n                  placeholder=\"e.g., 50000\"\n                  value={goalAmount}\n                  onChange={(e) => setGoalAmount(e.target.value)}\n                  data-testid=\"input-goal-amount\"\n                />\n              </div>\n              <Button \n                onClick={handleStep1Complete} \n                className=\"w-full\"\n                data-testid=\"button-step-1-continue\"\n              >\n                Continue\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        {currentStep === 2 && (\n          <Card data-testid=\"card-step-2\">\n            <CardHeader>\n              <CardTitle>Connect Intel</CardTitle>\n              <CardDescription>Link your bank account to track transactions automatically.</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-sm text-muted-foreground\">\n                We use Account Aggregator framework for secure, read-only access to your transactions.\n              </p>\n              <div className=\"bg-muted/50 p-4 rounded-lg\">\n                <p className=\"text-sm font-medium mb-2\">Coming Soon</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Bank integration will be available in the next update. For now, you can manually add transactions.\n                </p>\n              </div>\n              <Button \n                onClick={handleStep2Complete} \n                className=\"w-full\"\n                data-testid=\"button-step-2-continue\"\n              >\n                Continue\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        {currentStep === 3 && (\n          <Card data-testid=\"card-step-3\">\n            <CardHeader>\n              <CardTitle>Unlock Locker</CardTitle>\n              <CardDescription>Complete quick eKYC to create your Liquid Fund account.</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"bg-muted/50 p-4 rounded-lg\">\n                <p className=\"text-sm font-medium mb-2\">Coming Soon</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  eKYC integration will be available soon. Your Locker feature is ready to track your savings!\n                </p>\n              </div>\n              <Button \n                onClick={handleStep3Complete} \n                className=\"w-full\"\n                data-testid=\"button-step-3-continue\"\n              >\n                Continue\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        {currentStep === 4 && (\n          <Card data-testid=\"card-step-4\">\n            <CardHeader>\n              <CardTitle>Enable Stash</CardTitle>\n              <CardDescription>Approve UPI mandate for one-tap savings.</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"bg-muted/50 p-4 rounded-lg\">\n                <p className=\"text-sm font-medium mb-2\">Coming Soon</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  UPI AutoPay integration will be available soon. You can still manually track your stash transactions!\n                </p>\n              </div>\n              <Button \n                onClick={handleStep4Complete} \n                className=\"w-full\"\n                data-testid=\"button-step-4-complete\"\n              >\n                Complete Setup\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8925},"client/src/pages/HQ.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Target, Flame, Zap, TrendingUp } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { Goal, Streak } from \"@shared/schema\";\n\nexport default function HQ() {\n  const { data: mainGoal } = useQuery<Goal | null>({\n    queryKey: [\"/api/goals/main\"],\n  });\n\n  const { data: streak } = useQuery<Streak>({\n    queryKey: [\"/api/streak\"],\n  });\n\n  const { data: untaggedTransactions } = useQuery<any[]>({\n    queryKey: [\"/api/transactions/untagged\"],\n  });\n\n  const { data: totalStashedData } = useQuery<{ total: number }>({\n    queryKey: [\"/api/stash/total\"],\n  });\n\n  const progress = mainGoal\n    ? (parseFloat(mainGoal.currentAmount) / parseFloat(mainGoal.targetAmount)) * 100\n    : 0;\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-4xl font-bold mb-2\" data-testid=\"text-page-title\">HQ</h1>\n        <p className=\"text-muted-foreground\">Your command center for financial domination</p>\n      </div>\n\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <Card data-testid=\"card-main-quest\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"w-5 h-5 text-primary\" />\n              Main Quest\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {mainGoal ? (\n              <div className=\"space-y-4\">\n                <div>\n                  <div className=\"flex justify-between mb-2\">\n                    <span className=\"font-semibold text-lg\" data-testid=\"text-goal-name\">\n                      {mainGoal.name}\n                    </span>\n                    <span className=\"text-sm text-muted-foreground\">\n                      {progress.toFixed(0)}%\n                    </span>\n                  </div>\n                  <Progress value={progress} className=\"h-3\" data-testid=\"progress-goal\" />\n                  <div className=\"flex justify-between mt-2 text-sm\">\n                    <span className=\"text-muted-foreground\">\n                      ₹{parseFloat(mainGoal.currentAmount).toLocaleString('en-IN')}\n                    </span>\n                    <span className=\"font-medium\" data-testid=\"text-goal-target\">\n                      ₹{parseFloat(mainGoal.targetAmount).toLocaleString('en-IN')}\n                    </span>\n                  </div>\n                </div>\n                <Link href=\"/glow-up\">\n                  <Button className=\"w-full\" data-testid=\"button-stash-now\">\n                    <TrendingUp className=\"w-4 h-4 mr-2\" />\n                    Stash Now\n                  </Button>\n                </Link>\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <p className=\"text-muted-foreground mb-4\">No main quest set yet</p>\n                <Link href=\"/glow-up\">\n                  <Button data-testid=\"button-create-goal\">Create Your First Goal</Button>\n                </Link>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-save-streak\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Flame className=\"w-5 h-5 text-destructive\" />\n              Save Streak\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center py-4\">\n              <div className=\"text-6xl font-bold mb-2\" data-testid=\"text-save-streak\">\n                {streak?.saveStreak || 0}\n              </div>\n              <p className=\"text-muted-foreground\">days in a row</p>\n              <p className=\"text-sm text-muted-foreground mt-4\">\n                Keep stashing daily to build your streak!\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card data-testid=\"card-daily-fight\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Zap className=\"w-5 h-5 text-accent\" />\n            Daily Fight\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {untaggedTransactions && untaggedTransactions.length > 0 ? (\n            <div className=\"space-y-4\">\n              <p className=\"text-lg\">\n                You have <span className=\"font-bold text-accent\" data-testid=\"text-untagged-count\">{untaggedTransactions.length}</span> transactions waiting to be categorized\n              </p>\n              <Link href=\"/fight\">\n                <Button data-testid=\"button-start-fight\">\n                  Start The Fight\n                </Button>\n              </Link>\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <p className=\"text-muted-foreground mb-2\">All caught up!</p>\n              <p className=\"text-sm text-muted-foreground\">\n                No new transactions to categorize. Check back later.\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <div className=\"grid md:grid-cols-3 gap-6\">\n        <Card data-testid=\"card-total-stashed\">\n          <CardContent className=\"p-6\">\n            <div className=\"text-sm text-muted-foreground mb-1\">Total Stashed</div>\n            <div className=\"text-3xl font-bold\" data-testid=\"text-total-stashed\">\n              ₹{(totalStashedData?.total || 0).toLocaleString('en-IN')}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-fight-streak\">\n          <CardContent className=\"p-6\">\n            <div className=\"text-sm text-muted-foreground mb-1\">Fight Streak</div>\n            <div className=\"text-3xl font-bold\" data-testid=\"text-fight-streak\">\n              {streak?.fightStreak || 0} days\n            </div>\n          </CardContent>\n        </Card>\n\n        <Link href=\"/level-up\">\n          <Card className=\"hover-elevate cursor-pointer\" data-testid=\"card-quests-link\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-sm text-muted-foreground mb-1\">Complete Quests</div>\n              <div className=\"text-xl font-bold\">Level Up →</div>\n            </CardContent>\n          </Card>\n        </Link>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6377},"client/src/pages/Fight.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Sparkles, ThumbsDown, ShoppingBag, Check } from \"lucide-react\";\nimport type { Transaction } from \"@shared/schema\";\n\nexport default function Fight() {\n  const { toast } = useToast();\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  const { data: transactions = [], isLoading } = useQuery<Transaction[]>({\n    queryKey: [\"/api/transactions/untagged\"],\n  });\n\n  const tagMutation = useMutation({\n    mutationFn: async ({ id, tag }: { id: string; tag: string }) => {\n      await apiRequest(`/api/transactions/${id}/tag`, \"PATCH\", { tag });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/transactions/untagged\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/transactions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/streak\"] });\n      setCurrentIndex(0);\n    },\n  });\n\n  const handleTag = async (tag: 'Need' | 'Want' | 'Ick') => {\n    const transaction = transactions[currentIndex];\n    if (!transaction) return;\n\n    await tagMutation.mutateAsync({ id: transaction.id, tag });\n\n    let message = \"\";\n    if (tag === \"Need\") {\n      message = \"Essential purchase tagged!\";\n    } else if (tag === \"Want\") {\n      message = \"Reasonable want noted.\";\n    } else {\n      message = \"Ick identified! Fight back by stashing some cash.\";\n    }\n\n    toast({\n      title: \"Tagged!\",\n      description: message,\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <p>Loading transactions...</p>\n      </div>\n    );\n  }\n\n  if (transactions.length === 0) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"max-w-2xl mx-auto text-center py-12\">\n          <Check className=\"w-16 h-16 text-primary mx-auto mb-4\" />\n          <h2 className=\"text-2xl font-bold mb-2\">All Caught Up!</h2>\n          <p className=\"text-muted-foreground\">\n            No transactions to categorize right now. Check back later!\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  const currentTransaction = transactions[currentIndex];\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"max-w-2xl mx-auto\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-4xl font-bold mb-2\" data-testid=\"text-page-title\">The Fight</h1>\n          <p className=\"text-muted-foreground\">\n            Categorize your spending • {currentIndex + 1} of {transactions.length}\n          </p>\n        </div>\n\n        <Card data-testid=\"card-transaction\">\n          <CardHeader>\n            <div className=\"flex justify-between items-start\">\n              <div>\n                <CardTitle className=\"text-2xl mb-2\" data-testid=\"text-transaction-description\">\n                  {currentTransaction.description}\n                </CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  {new Date(currentTransaction.date).toLocaleDateString('en-IN', {\n                    day: 'numeric',\n                    month: 'long',\n                    year: 'numeric'\n                  })}\n                </p>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-3xl font-bold\" data-testid=\"text-transaction-amount\">\n                  ₹{parseFloat(currentTransaction.amount).toLocaleString('en-IN')}\n                </div>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-3\">\n              <Button\n                onClick={() => handleTag('Need')}\n                variant=\"outline\"\n                className=\"w-full justify-start text-left h-auto py-4\"\n                disabled={tagMutation.isPending}\n                data-testid=\"button-tag-need\"\n              >\n                <div className=\"flex items-start gap-3 w-full\">\n                  <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center shrink-0\">\n                    <Sparkles className=\"w-5 h-5 text-primary\" />\n                  </div>\n                  <div>\n                    <div className=\"font-semibold mb-1\">Need</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Essential expenses like rent, groceries, bills, transportation\n                    </div>\n                  </div>\n                </div>\n              </Button>\n\n              <Button\n                onClick={() => handleTag('Want')}\n                variant=\"outline\"\n                className=\"w-full justify-start text-left h-auto py-4\"\n                disabled={tagMutation.isPending}\n                data-testid=\"button-tag-want\"\n              >\n                <div className=\"flex items-start gap-3 w-full\">\n                  <div className=\"w-10 h-10 bg-secondary/10 rounded-lg flex items-center justify-center shrink-0\">\n                    <ShoppingBag className=\"w-5 h-5 text-secondary\" />\n                  </div>\n                  <div>\n                    <div className=\"font-semibold mb-1\">Want</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Non-essential but reasonable like dining out, entertainment\n                    </div>\n                  </div>\n                </div>\n              </Button>\n\n              <Button\n                onClick={() => handleTag('Ick')}\n                variant=\"outline\"\n                className=\"w-full justify-start text-left h-auto py-4\"\n                disabled={tagMutation.isPending}\n                data-testid=\"button-tag-ick\"\n              >\n                <div className=\"flex items-start gap-3 w-full\">\n                  <div className=\"w-10 h-10 bg-destructive/10 rounded-lg flex items-center justify-center shrink-0\">\n                    <ThumbsDown className=\"w-5 h-5 text-destructive\" />\n                  </div>\n                  <div>\n                    <div className=\"font-semibold mb-1\">Ick</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Impulse buys, wasteful spending, unnecessary subscriptions\n                    </div>\n                  </div>\n                </div>\n              </Button>\n            </div>\n\n            {currentTransaction.category && (\n              <div className=\"pt-4 border-t\">\n                <p className=\"text-sm text-muted-foreground mb-2\">Original Category:</p>\n                <Badge variant=\"secondary\">{currentTransaction.category}</Badge>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6910},"client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Target, TrendingUp, Trophy, Zap } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <header className=\"flex items-center justify-between mb-12\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n            The Financial Glow-Up\n          </h1>\n          <Button \n            onClick={() => window.location.href = '/api/login'}\n            data-testid=\"button-login\"\n          >\n            Log In\n          </Button>\n        </header>\n\n        <div className=\"max-w-4xl mx-auto text-center mb-16\">\n          <h2 className=\"text-5xl font-bold mb-6\">\n            Turn Savings Into Your Superpower\n          </h2>\n          <p className=\"text-xl text-muted-foreground mb-8\">\n            A gamified financial app designed for young adults in India. Transform the stress of saving into an engaging experience.\n          </p>\n          <Button \n            size=\"lg\" \n            onClick={() => window.location.href = '/api/login'}\n            data-testid=\"button-get-started\"\n          >\n            Get Started\n          </Button>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-16\">\n          <Card data-testid=\"card-feature-track\">\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-xl flex items-center justify-center mb-4\">\n                <Target className=\"w-6 h-6 text-primary\" />\n              </div>\n              <h3 className=\"font-semibold mb-2\">TRACK</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Connect your bank securely and get real-time transaction feeds\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-feature-fight\">\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-accent/10 rounded-xl flex items-center justify-center mb-4\">\n                <Zap className=\"w-6 h-6 text-accent\" />\n              </div>\n              <h3 className=\"font-semibold mb-2\">FIGHT</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Categorize spending as Needs, Wants, or Icks and fight impulse buys\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-feature-stash\">\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-secondary/10 rounded-xl flex items-center justify-center mb-4\">\n                <TrendingUp className=\"w-6 h-6 text-secondary\" />\n              </div>\n              <h3 className=\"font-semibold mb-2\">STASH</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Move real money to your Locker with one tap and watch it grow\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-feature-grow\">\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-xl flex items-center justify-center mb-4\">\n                <Trophy className=\"w-6 h-6 text-primary\" />\n              </div>\n              <h3 className=\"font-semibold mb-2\">GROW</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Build streaks, unlock badges, and level up your financial journey\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"text-center\">\n          <h3 className=\"text-2xl font-bold mb-4\">Ready for Your Financial Glow-Up?</h3>\n          <Button \n            size=\"lg\" \n            onClick={() => window.location.href = '/api/login'}\n            data-testid=\"button-start-journey\"\n          >\n            Start Your Journey\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4007},"client/src/pages/TrophyCase.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Trophy, Flame, Calendar } from \"lucide-react\";\nimport type { Streak } from \"@shared/schema\";\n\nexport default function TrophyCase() {\n  const { data: streak } = useQuery<Streak>({\n    queryKey: [\"/api/streak\"],\n  });\n\n  const achievements = [\n    {\n      id: \"first-stash\",\n      icon: \"🎯\",\n      title: \"First Stash\",\n      description: \"Saved your first ₹1,000\",\n      points: 100,\n      unlocked: true,\n    },\n    {\n      id: \"week-streak\",\n      icon: \"🔥\",\n      title: \"Week Warrior\",\n      description: \"Maintained a 7-day save streak\",\n      points: 250,\n      unlocked: (streak?.saveStreak || 0) >= 7,\n    },\n    {\n      id: \"fight-master\",\n      icon: \"⚔️\",\n      title: \"Fight Master\",\n      description: \"Categorized 100 transactions\",\n      points: 300,\n      unlocked: false,\n    },\n    {\n      id: \"ick-slayer\",\n      icon: \"💀\",\n      title: \"Ick Slayer\",\n      description: \"Identified 50 Icks\",\n      points: 200,\n      unlocked: false,\n    },\n    {\n      id: \"goal-crusher\",\n      icon: \"🏆\",\n      title: \"Goal Crusher\",\n      description: \"Completed your first savings goal\",\n      points: 500,\n      unlocked: false,\n    },\n    {\n      id: \"month-master\",\n      icon: \"📅\",\n      title: \"Month Master\",\n      description: \"Maintained a 30-day save streak\",\n      points: 1000,\n      unlocked: (streak?.saveStreak || 0) >= 30,\n    },\n    {\n      id: \"ten-k-club\",\n      icon: \"💎\",\n      title: \"10K Club\",\n      description: \"Stashed ₹10,000 total\",\n      points: 400,\n      unlocked: false,\n    },\n    {\n      id: \"quest-complete\",\n      icon: \"📚\",\n      title: \"Knowledge Seeker\",\n      description: \"Completed your first financial literacy quest\",\n      points: 150,\n      unlocked: false,\n    },\n  ];\n\n  const streakCalendar = Array.from({ length: 30 }, (_, i) => {\n    const dayNumber = i + 1;\n    const hasActivity = dayNumber <= (streak?.saveStreak || 0);\n    return {\n      day: dayNumber,\n      hasActivity,\n    };\n  });\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-4xl font-bold mb-2\" data-testid=\"text-page-title\">Trophy Case</h1>\n        <p className=\"text-muted-foreground\">Your badges, streaks, and achievements</p>\n      </div>\n\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <Card data-testid=\"card-save-streak\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Flame className=\"w-5 h-5 text-destructive\" />\n              Save Streak\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center\">\n              <div className=\"text-6xl font-bold mb-2\" data-testid=\"text-save-streak\">\n                {streak?.saveStreak || 0}\n              </div>\n              <p className=\"text-muted-foreground\">days in a row</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-fight-streak\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calendar className=\"w-5 h-5 text-primary\" />\n              Fight Streak\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center\">\n              <div className=\"text-6xl font-bold mb-2\" data-testid=\"text-fight-streak\">\n                {streak?.fightStreak || 0}\n              </div>\n              <p className=\"text-muted-foreground\">days in a row</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Streak Calendar</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-10 gap-2\">\n            {streakCalendar.map((day) => (\n              <div\n                key={day.day}\n                className={`aspect-square rounded-md flex items-center justify-center text-xs font-medium ${\n                  day.hasActivity\n                    ? \"bg-primary text-primary-foreground\"\n                    : \"bg-muted text-muted-foreground\"\n                }`}\n                data-testid={`calendar-day-${day.day}`}\n              >\n                {day.day}\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      <div>\n        <h2 className=\"text-2xl font-bold mb-4\">Achievements</h2>\n        <div className=\"grid md:grid-cols-3 gap-4\">\n          {achievements.map((achievement) => (\n            <Card\n              key={achievement.id}\n              className={achievement.unlocked ? \"\" : \"opacity-50\"}\n              data-testid={`card-achievement-${achievement.id}`}\n            >\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"text-4xl\">{achievement.icon}</div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold mb-1\">{achievement.title}</h3>\n                    <p className=\"text-sm text-muted-foreground mb-2\">\n                      {achievement.description}\n                    </p>\n                    <div className=\"flex items-center gap-2\">\n                      <Trophy className=\"w-4 h-4 text-primary\" />\n                      <span className=\"text-sm font-medium\">{achievement.points} pts</span>\n                      {achievement.unlocked && (\n                        <span className=\"text-xs bg-primary/10 text-primary px-2 py-1 rounded ml-auto\">\n                          Unlocked\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5860},"client/src/pages/ExpenseLog.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { \n  Coffee, Car, ShoppingBag, Ticket, FileText, Tag, \n  Trash2, PlusCircle, Calendar\n} from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport AddExpenseModal from \"@/components/AddExpenseModal\";\nimport { format } from \"date-fns\";\nimport type { Transaction } from \"@shared/schema\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\nexport default function ExpenseLog() {\n  const { toast } = useToast();\n  const [isAddExpenseOpen, setIsAddExpenseOpen] = useState(false);\n  const [deleteId, setDeleteId] = useState<string | null>(null);\n\n  const { data: transactions = [], isLoading, isError } = useQuery<Transaction[]>({\n    queryKey: [\"/api/transactions\"],\n    retry: false,\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(`/api/transactions/${id}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/transactions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/transactions/untagged\"] });\n      toast({\n        title: \"Deleted\",\n        description: \"Expense deleted successfully\",\n      });\n      setDeleteId(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete expense\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getCategoryIcon = (cat: string | null) => {\n    const iconClass = \"w-5 h-5\";\n    if (!cat) return <Tag className={iconClass} />;\n    \n    switch (cat.toLowerCase()) {\n      case 'food': return <Coffee className={iconClass} />;\n      case 'transport': return <Car className={iconClass} />;\n      case 'shopping': return <ShoppingBag className={iconClass} />;\n      case 'entertainment': return <Ticket className={iconClass} />;\n      case 'bills': return <FileText className={iconClass} />;\n      default: return <Tag className={iconClass} />;\n    }\n  };\n\n  const getCategoryColor = (cat: string | null) => {\n    if (!cat) return 'bg-muted text-muted-foreground';\n    \n    switch (cat.toLowerCase()) {\n      case 'food': return 'bg-chart-1/10 text-chart-1';\n      case 'transport': return 'bg-chart-2/10 text-chart-2';\n      case 'shopping': return 'bg-chart-3/10 text-chart-3';\n      case 'entertainment': return 'bg-chart-4/10 text-chart-4';\n      case 'bills': return 'bg-chart-5/10 text-chart-5';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const getTagColor = (tag: string | null) => {\n    if (!tag) return 'secondary';\n    \n    switch (tag) {\n      case 'Need': return 'default';\n      case 'Want': return 'secondary';\n      case 'Ick': return 'destructive';\n      default: return 'secondary';\n    }\n  };\n\n  const formatDate = (date: Date | string) => {\n    const d = new Date(date);\n    const today = new Date();\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    if (d.toDateString() === today.toDateString()) {\n      return 'Today';\n    } else if (d.toDateString() === yesterday.toDateString()) {\n      return 'Yesterday';\n    } else {\n      return format(d, 'MMM d, yyyy');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <header className=\"sticky top-0 z-50 border-b border-primary/20 bg-background/30 backdrop-blur-2xl supports-[backdrop-filter]:bg-background/30 shadow-[0_8px_32px_rgba(139,92,246,0.1)]\">\n        <div className=\"container mx-auto px-4 py-3 flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <h1 className=\"text-xl font-bold\" data-testid=\"text-page-title\">Expense Log</h1>\n            <Badge variant=\"secondary\">{transactions.length} expenses</Badge>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"default\"\n              size=\"sm\"\n              onClick={() => setIsAddExpenseOpen(true)}\n              data-testid=\"button-add-expense\"\n            >\n              <PlusCircle className=\"w-4 h-4 mr-2\" />\n              Add Expense\n            </Button>\n            <ThemeToggle />\n          </div>\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-6 max-w-4xl\">\n        {isLoading ? (\n          <Card className=\"p-8 text-center\">\n            <p className=\"text-muted-foreground\">Loading expenses...</p>\n          </Card>\n        ) : isError ? (\n          <Card className=\"p-12 text-center backdrop-blur-xl bg-card/40 border-border/50\">\n            <h2 className=\"text-2xl font-bold mb-2\">Authentication Required</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              Please log in to view and manage your expenses\n            </p>\n            <Button onClick={() => window.location.href = '/api/login'}>\n              Log In\n            </Button>\n          </Card>\n        ) : transactions.length === 0 ? (\n          <Card className=\"p-12 text-center backdrop-blur-xl bg-card/40 border-border/50\">\n            <Calendar className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" />\n            <h2 className=\"text-2xl font-bold mb-2\">No expenses yet</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              Start logging your expenses to track your spending\n            </p>\n            <Button\n              onClick={() => setIsAddExpenseOpen(true)}\n              data-testid=\"button-add-first-expense\"\n            >\n              <PlusCircle className=\"w-4 h-4 mr-2\" />\n              Add Your First Expense\n            </Button>\n          </Card>\n        ) : (\n          <Card className=\"backdrop-blur-xl bg-card/40 border-border/50\">\n            <ScrollArea className=\"h-[calc(100vh-12rem)]\">\n              <div className=\"p-4 space-y-2\">\n                {transactions.map((transaction) => (\n                  <div\n                    key={transaction.id}\n                    className=\"flex items-center gap-3 p-4 rounded-lg hover-elevate group\"\n                    data-testid={`item-expense-${transaction.id}`}\n                  >\n                    <div className={`p-2 rounded-full ${getCategoryColor(transaction.category)}`}>\n                      {getCategoryIcon(transaction.category)}\n                    </div>\n                    \n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-semibold text-sm truncate\" data-testid={`text-description-${transaction.id}`}>\n                        {transaction.description}\n                      </p>\n                      <div className=\"flex items-center gap-2 flex-wrap\">\n                        {transaction.category && (\n                          <Badge variant=\"secondary\" className=\"text-xs\" data-testid={`badge-category-${transaction.id}`}>\n                            {transaction.category}\n                          </Badge>\n                        )}\n                        {transaction.tag && (\n                          <Badge variant={getTagColor(transaction.tag)} className=\"text-xs\" data-testid={`badge-tag-${transaction.id}`}>\n                            {transaction.tag}\n                          </Badge>\n                        )}\n                        <span className=\"text-xs text-muted-foreground\" data-testid={`text-date-${transaction.id}`}>\n                          {formatDate(transaction.date)}\n                        </span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"text-right\">\n                        <p className=\"font-bold text-base font-mono\" data-testid={`text-amount-${transaction.id}`}>\n                          ₹{parseFloat(transaction.amount).toFixed(2)}\n                        </p>\n                      </div>\n                      \n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"opacity-0 group-hover:opacity-100 transition-opacity\"\n                        onClick={() => setDeleteId(transaction.id)}\n                        data-testid={`button-delete-${transaction.id}`}\n                      >\n                        <Trash2 className=\"w-4 h-4 text-destructive\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </ScrollArea>\n          </Card>\n        )}\n      </main>\n\n      <AddExpenseModal\n        open={isAddExpenseOpen}\n        onOpenChange={setIsAddExpenseOpen}\n      />\n\n      <AlertDialog open={deleteId !== null} onOpenChange={(open) => !open && setDeleteId(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Expense?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action cannot be undone. This will permanently delete this expense from your log.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deleteId && deleteMutation.mutate(deleteId)}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":10033},"client/src/pages/AskCoach.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Send, Sparkles, User } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\n\ninterface ChatMessage {\n  role: 'user' | 'assistant';\n  message: string;\n}\n\nexport default function AskCoach() {\n  const { toast } = useToast();\n  const [chatMessage, setChatMessage] = useState(\"\");\n  const [chatHistory, setChatHistory] = useState<ChatMessage[]>([\n    {\n      role: 'assistant',\n      message: \"Hello! I'm your personal financial coach. I'm here to help you with budgeting, saving strategies, understanding your spending habits, and achieving your financial goals. What would you like to know today?\"\n    }\n  ]);\n\n  const chatMutation = useMutation({\n    mutationFn: async (message: string) => {\n      const response = await apiRequest(\"/api/ai/chat\", \"POST\", { message });\n      return response;\n    },\n    onSuccess: (data: any) => {\n      setChatHistory((prev) => [...prev, { role: 'assistant', message: data.response }]);\n      setChatMessage(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to get AI response. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (!chatMessage.trim() || chatMutation.isPending) return;\n    \n    setChatHistory((prev) => [...prev, { role: 'user', message: chatMessage }]);\n    chatMutation.mutate(chatMessage);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const suggestedQuestions = [\n    \"How can I start saving money?\",\n    \"What's the 50/30/20 budgeting rule?\",\n    \"How do I reduce impulse buying?\",\n    \"Tips for building an emergency fund?\"\n  ];\n\n  const handleSuggestion = (question: string) => {\n    setChatMessage(question);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <header className=\"sticky top-0 z-50 border-b border-primary/20 bg-background/30 backdrop-blur-2xl supports-[backdrop-filter]:bg-background/30 shadow-[0_8px_32px_rgba(139,92,246,0.1)]\">\n        <div className=\"container mx-auto px-4 py-3 flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <h1 className=\"text-xl font-bold\" data-testid=\"text-page-title\">Ask Your Coach</h1>\n            <Sparkles className=\"w-5 h-5 text-primary\" />\n          </div>\n          <ThemeToggle />\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-6 max-w-4xl\">\n        <Card className=\"h-[calc(100vh-12rem)] flex flex-col backdrop-blur-xl bg-card/40 border-border/50\">\n          <CardHeader className=\"border-b\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Sparkles className=\"w-5 h-5 text-primary\" />\n              Financial Literacy Coach\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              Your personal AI assistant for financial advice and money management\n            </p>\n          </CardHeader>\n          \n          <ScrollArea className=\"flex-1 p-4\">\n            <div className=\"space-y-4\" data-testid=\"chat-messages\">\n              {chatHistory.map((msg, index) => (\n                <div\n                  key={index}\n                  className={`flex gap-3 ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}\n                  data-testid={`message-${msg.role}-${index}`}\n                >\n                  {msg.role === 'assistant' && (\n                    <Avatar className=\"w-8 h-8 mt-1\">\n                      <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                        <Sparkles className=\"w-4 h-4\" />\n                      </AvatarFallback>\n                    </Avatar>\n                  )}\n                  \n                  <div\n                    className={`max-w-[80%] rounded-lg p-4 ${\n                      msg.role === 'user'\n                        ? 'bg-primary text-primary-foreground'\n                        : 'bg-muted'\n                    }`}\n                  >\n                    <p className=\"text-sm whitespace-pre-wrap\">{msg.message}</p>\n                  </div>\n\n                  {msg.role === 'user' && (\n                    <Avatar className=\"w-8 h-8 mt-1\">\n                      <AvatarFallback className=\"bg-secondary\">\n                        <User className=\"w-4 h-4\" />\n                      </AvatarFallback>\n                    </Avatar>\n                  )}\n                </div>\n              ))}\n              \n              {chatMutation.isPending && (\n                <div className=\"flex gap-3 justify-start\">\n                  <Avatar className=\"w-8 h-8 mt-1\">\n                    <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                      <Sparkles className=\"w-4 h-4\" />\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"bg-muted rounded-lg p-4\">\n                    <div className=\"flex gap-1\">\n                      <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: '0ms' }} />\n                      <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: '150ms' }} />\n                      <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: '300ms' }} />\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </ScrollArea>\n\n          {chatHistory.length === 1 && (\n            <CardContent className=\"border-t border-b bg-muted/20 py-4\">\n              <p className=\"text-xs text-muted-foreground mb-2\">Suggested questions:</p>\n              <div className=\"grid grid-cols-2 gap-2\">\n                {suggestedQuestions.map((question, index) => (\n                  <Button\n                    key={index}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"text-xs h-auto py-2 justify-start\"\n                    onClick={() => handleSuggestion(question)}\n                    data-testid={`button-suggestion-${index}`}\n                  >\n                    {question}\n                  </Button>\n                ))}\n              </div>\n            </CardContent>\n          )}\n\n          <CardContent className=\"p-4 border-t\">\n            <div className=\"flex gap-2\">\n              <Input\n                value={chatMessage}\n                onChange={(e) => setChatMessage(e.target.value)}\n                onKeyPress={handleKeyPress}\n                placeholder=\"Ask anything about money, budgeting, or saving...\"\n                disabled={chatMutation.isPending}\n                className=\"flex-1\"\n                data-testid=\"input-chat-message\"\n              />\n              <Button\n                onClick={handleSendMessage}\n                disabled={!chatMessage.trim() || chatMutation.isPending}\n                size=\"icon\"\n                data-testid=\"button-send-message\"\n              >\n                <Send className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":7715}},"version":2}